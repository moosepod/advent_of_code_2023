
* AOC 2023 Day 14

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 14 star 1
*** Problem statement
*** Solution
#+BEGIN_SRC python :results output
import re

def roll_lines(lines: list[str]):
    for y in range(len(lines)-1,0,-1):
        for x in range(0,len(lines[-1])):
            if lines[y][x] == 'O' and lines[y-1][x] == '.':
                lines[y][x] = '.'
                lines[y-1][x] = 'O'

def star_1(path: str) -> int:
  lines = []
  with open(path,'r') as f:
    for line in f.read().split("\n"):
      line = list(line.strip())
      if line:
        lines.append(line)
        roll_lines(lines)

  #for line in lines:
  #  print(''.join(line))
  scores = range(len(lines),0,-1)

  return sum([len([c for c in line if c == 'O']) * score for line,score in zip(lines,scores)])
  
print("Star 1:",star_1("input.txt"))

#+END_SRC

#+RESULTS:
: Star 1: 110274

** Day 14 star 2
*** Problem statement
*** Solution
#+BEGIN_SRC python :results output
def roll_lines_n(lines: list[str]):
    for y in range(1,len(lines)):
        for x in range(0,len(lines[-1])):
            offset = 0
            while y-offset > 0 and lines[y-offset][x] == 'O' and lines[y-1-offset][x] == '.':
                lines[y-offset][x] = '.'
                lines[y-1-offset][x] = 'O'
                offset+=1

def roll_lines_s(lines: list[str]):
    for y in range(len(lines)-1,-1,-1):
        for x in range(0,len(lines[-1])):
            offset = 0
            while y+offset < len(lines)-1 and lines[y+offset][x] == 'O' and lines[y+1+offset][x] == '.':
                lines[y+offset][x] = '.'
                lines[y+1+offset][x] = 'O'
                offset += 1
                
def roll_lines_e(lines: list[str]):
    for x in range(len(lines[-1])-1,-1,-1):
        for y in range(0,len(lines[-1])):
            offset = 0
            while x+offset < len(lines[-1])-1 and lines[y][x+offset] == 'O' and lines[y][x+1+offset] == '.':
                lines[y][x+offset] = '.'
                lines[y][x+offset+1] = 'O'
                offset += 1

def roll_lines_w(lines: list[str]):
    for x in range(0,len(lines[-1])):
        for y in range(0,len(lines[-1])):
            offset = 0
            while x-offset> 0 and lines[y][x-offset] == 'O' and lines[y][x-1-offset] == '.':
                lines[y][x-offset] = '.'
                lines[y][x-1-offset] = 'O'
                offset += 1

def dump_lines(lines, msg: str):
  print(f'---- {msg} ----')
  for line in lines:
    print(''.join(line))
  print()
    
def star_2(path: str) -> int:
  lines = []
  with open(path,'r') as f:
    for line in f.read().split("\n"):
      line = list(line.strip())
      if line:
        lines.append(line)

    dump_lines(lines,'start')
    roll_lines_n(lines)
    dump_lines(lines,'north')
    roll_lines_w(lines)
    dump_lines(lines,'west')
    roll_lines_s(lines)
    dump_lines(lines,'south')
    roll_lines_e(lines)
    dump_lines(lines,'east')

  scores = range(len(lines),0,-1)

  return sum([len([c for c in line if c == 'O']) * score for line,score in zip(lines,scores)])
  
print("Star 2:", star_2("sample.txt"))
#+END_SRC

#+RESULTS:
#+begin_example
---- start ----
O....#....
O.OO#....#
.....##...
OO.#O....O
.O.....O#.
O.#..O.#.#
..O..#O..O
.......O..
#....###..
#OO..#....

---- north ----
OOOO.#.O..
OO..#....#
OO..O##..O
O..#.OO...
........#.
..#....#.#
..O..#.O.O
..O.......
#....###..
#....#....

---- west ----
OOOO.#O...
OO..#....#
OOO..##O..
O..#OO....
........#.
..#....#.#
O....#OO..
O.........
#....###..
#....#....

---- south ----
.....#....
....#.O..#
O..O.##...
O.O#......
O.O....O#.
O.#..O.#.#
O....#....
OO....OO..
#O...###..
#O..O#....

---- east ----
.....#....
....#...O#
...OO##...
.OO#......
.....OOO#.
.O#...O#.#
....O#....
......OOOO
#...O###..
#..OO#....

Star 2: 87
#+end_example

