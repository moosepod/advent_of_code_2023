
* AOC 2023 Day 14

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 14 star 1
*** Problem statement
*** Solution
#+BEGIN_SRC python :results output
import re

def roll_lines(lines: list[str]):
    for y in range(len(lines)-1,0,-1):
        for x in range(0,len(lines[-1])):
            if lines[y][x] == 'O' and lines[y-1][x] == '.':
                lines[y][x] = '.'
                lines[y-1][x] = 'O'

def star_1(path: str) -> int:
  lines = []
  with open(path,'r') as f:
    for line in f.read().split("\n"):
      line = list(line.strip())
      if line:
        lines.append(line)
        roll_lines(lines)

  #for line in lines:
  #  print(''.join(line))
  scores = range(len(lines),0,-1)

  return sum([len([c for c in line if c == 'O']) * score for line,score in zip(lines,scores)])
  
print("Star 1:",star_1("input.txt"))

#+END_SRC

#+RESULTS:
: Star 1: 110274

** Day 14 star 2
*** Problem statement
*** Solution
#+BEGIN_SRC python :results output
def roll_lines_n(lines: list[str]):
    for y in range(1,len(lines)):
        for x in range(0,len(lines[-1])):
            offset = 0
            while y-offset > 0 and lines[y-offset][x] == 'O' and lines[y-1-offset][x] == '.':
                lines[y-offset][x] = '.'
                lines[y-1-offset][x] = 'O'
                offset+=1

def roll_lines_s(lines: list[str]):
    for y in range(len(lines)-1,-1,-1):
        for x in range(0,len(lines[-1])):
            offset = 0
            while y+offset < len(lines)-1 and lines[y+offset][x] == 'O' and lines[y+1+offset][x] == '.':
                lines[y+offset][x] = '.'
                lines[y+1+offset][x] = 'O'
                offset += 1
                
def roll_lines_e(lines: list[str]):
    for x in range(len(lines[-1])-1,-1,-1):
        for y in range(0,len(lines[-1])):
            offset = 0
            while x+offset < len(lines[-1])-1 and lines[y][x+offset] == 'O' and lines[y][x+1+offset] == '.':
                lines[y][x+offset] = '.'
                lines[y][x+offset+1] = 'O'
                offset += 1

def roll_lines_w(lines: list[str]):
    for x in range(0,len(lines[-1])):
        for y in range(0,len(lines[-1])):
            offset = 0
            while x-offset> 0 and lines[y][x-offset] == 'O' and lines[y][x-1-offset] == '.':
                lines[y][x-offset] = '.'
                lines[y][x-1-offset] = 'O'
                offset += 1

def dump_lines(lines, msg: str):
  print(f'---- {msg} ----')
  for line in lines:
    print(''.join(line))
  print()

def score_lines(lines):
  scores = range(len(lines),0,-1)
  return sum([len([c for c in line if c == 'O']) * score for line,score in zip(lines,scores)])

def find_cycle(scores):
    max_cycle_size = 0
    cycle_size = 1
    last_index = len(scores)-1
    while cycle_size < len(scores):
        if scores[last_index] == scores[last_index-cycle_size]:
            length  = 0
            for i in range(1,cycle_size):
                length += 1
                if scores[last_index-i] != scores[last_index-i-cycle_size]:
                    break
                length += 1
            if length > max_cycle_size:
                max_cycle_size = length
        cycle_size += 1
            
    return max_cycle_size
    
def star_2(path: str) -> int:
  lines = []
  with open(path,'r') as f:
    for line in f.read().split("\n"):
      line = list(line.strip())
      if line:
        lines.append(line)

    scores = [score_lines(lines)]
    for i in range(0,100):
        roll_lines_n(lines)
        roll_lines_w(lines)
        roll_lines_s(lines)
        roll_lines_e(lines)
        scores.append(score_lines(lines))
        print('Cycle size', find_cycle(scores))

    print(scores)

  return 0

  
print("Star 2:", star_2("sample.txt"))
#+END_SRC

#+RESULTS:
#+begin_example
Cycle size 0
Cycle size 0
Cycle size 0
Cycle size 1
Cycle size 0
Cycle size 0
Cycle size 1
Cycle size 0
Cycle size 0
Cycle size 1
Cycle size 3
Cycle size 5
Cycle size 7
Cycle size 9
Cycle size 11
Cycle size 12
Cycle size 12
Cycle size 12
Cycle size 12
Cycle size 12
Cycle size 12
Cycle size 12
Cycle size 13
Cycle size 15
Cycle size 17
Cycle size 19
Cycle size 21
Cycle size 23
Cycle size 25
Cycle size 26
Cycle size 26
Cycle size 26
Cycle size 26
Cycle size 26
Cycle size 26
Cycle size 26
Cycle size 27
Cycle size 29
Cycle size 31
Cycle size 33
Cycle size 35
Cycle size 37
Cycle size 39
Cycle size 40
Cycle size 40
Cycle size 40
Cycle size 40
Cycle size 40
Cycle size 40
Cycle size 40
Cycle size 41
Cycle size 43
Cycle size 45
Cycle size 47
Cycle size 49
Cycle size 51
Cycle size 53
Cycle size 54
Cycle size 54
Cycle size 54
Cycle size 54
Cycle size 54
Cycle size 54
Cycle size 54
Cycle size 55
Cycle size 57
Cycle size 59
Cycle size 61
Cycle size 63
Cycle size 65
Cycle size 67
Cycle size 68
Cycle size 68
Cycle size 68
Cycle size 68
Cycle size 68
Cycle size 68
Cycle size 68
Cycle size 69
Cycle size 71
Cycle size 73
Cycle size 75
Cycle size 77
Cycle size 79
Cycle size 81
Cycle size 82
Cycle size 82
Cycle size 82
Cycle size 82
Cycle size 82
Cycle size 82
Cycle size 82
Cycle size 83
Cycle size 85
Cycle size 87
Cycle size 89
Cycle size 91
Cycle size 93
Cycle size 95
Cycle size 96
[104, 87, 69, 69, 69, 65, 64, 65, 63, 68, 69, 69, 65, 64, 65, 63, 68, 69, 69, 65, 64, 65, 63, 68, 69, 69, 65, 64, 65, 63, 68, 69, 69, 65, 64, 65, 63, 68, 69, 69, 65, 64, 65, 63, 68, 69, 69, 65, 64, 65, 63, 68, 69, 69, 65, 64, 65, 63, 68, 69, 69, 65, 64, 65, 63, 68, 69, 69, 65, 64, 65, 63, 68, 69, 69, 65, 64, 65, 63, 68, 69, 69, 65, 64, 65, 63, 68, 69, 69, 65, 64, 65, 63, 68, 69, 69, 65, 64, 65, 63, 68]
Star 2: 0
#+end_example

