
* AOC 2023 Day 14

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 14 star 1
*** Problem statement
*** Solution
#+BEGIN_SRC python :results output
import re

def roll_lines(lines: list[str]):
    for y in range(len(lines)-1,0,-1):
        for x in range(0,len(lines[-1])):
            if lines[y][x] == 'O' and lines[y-1][x] == '.':
                lines[y][x] = '.'
                lines[y-1][x] = 'O'

def star_1(path: str) -> int:
  lines = []
  with open(path,'r') as f:
    for line in f.read().split("\n"):
      line = list(line.strip())
      if line:
        lines.append(line)
        roll_lines(lines)

  #for line in lines:
  #  print(''.join(line))
  scores = range(len(lines),0,-1)

  return sum([len([c for c in line if c == 'O']) * score for line,score in zip(lines,scores)])
  
print("Star 1:",star_1("input.txt"))

#+END_SRC

#+RESULTS:
: Star 1: 110274

** Day 14 star 2
*** Notes
- Can find point at which cycle loops
- Not entirely sure how to get from there to the mod
  
*** Solution
#+BEGIN_SRC python :results output
def roll_lines_n(lines: list[str]):
    for y in range(1,len(lines)):
        for x in range(0,len(lines[-1])):
            offset = 0
            while y-offset > 0 and lines[y-offset][x] == 'O' and lines[y-1-offset][x] == '.':
                lines[y-offset][x] = '.'
                lines[y-1-offset][x] = 'O'
                offset+=1

def roll_lines_s(lines: list[str]):
    for y in range(len(lines)-1,-1,-1):
        for x in range(0,len(lines[-1])):
            offset = 0
            while y+offset < len(lines)-1 and lines[y+offset][x] == 'O' and lines[y+1+offset][x] == '.':
                lines[y+offset][x] = '.'
                lines[y+1+offset][x] = 'O'
                offset += 1
                
def roll_lines_e(lines: list[str]):
    for x in range(len(lines[-1])-1,-1,-1):
        for y in range(0,len(lines[-1])):
            offset = 0
            while x+offset < len(lines[-1])-1 and lines[y][x+offset] == 'O' and lines[y][x+1+offset] == '.':
                lines[y][x+offset] = '.'
                lines[y][x+offset+1] = 'O'
                offset += 1

def roll_lines_w(lines: list[str]):
    for x in range(0,len(lines[-1])):
        for y in range(0,len(lines[-1])):
            offset = 0
            while x-offset> 0 and lines[y][x-offset] == 'O' and lines[y][x-1-offset] == '.':
                lines[y][x-offset] = '.'
                lines[y][x-1-offset] = 'O'
                offset += 1

def dump_lines(lines, msg: str):
  print(f'---- {msg} ----')
  for line in lines:
    print(''.join(line))
  print()

def score_lines(lines):
  scores = range(len(lines),0,-1)
  return sum([len([c for c in line if c == 'O']) * score for line,score in zip(lines,scores)])

def join_lines(lines: list[list[str]]) -> str:
    return ''.join([''.join(l) for l in lines])

def find_cycle(scores):
    max_cycle_size = 0
    cycle_size = 1
    last_index = len(scores)-1
    while cycle_size < len(scores):
        if scores[last_index] == scores[last_index-cycle_size]:
            length  = 0
            for i in range(1,cycle_size):
                length += 1
                if scores[last_index-i] != scores[last_index-i-cycle_size]:
                    break
                length += 1
            if length > max_cycle_size:
                max_cycle_size = length
        cycle_size += 1
            
    return max_cycle_size
    
def star_2(path: str) -> int:
  lines = []
  with open(path,'r') as f:
    for line in f.read().split("\n"):
      line = list(line.strip())
      if line:
        lines.append(line)

    scores = {}
    cache = {join_lines(lines): 0}
    scores[0] = score_lines(lines)
    for i in range(1,40):
        roll_lines_n(lines)
        roll_lines_w(lines)
        roll_lines_s(lines)
        roll_lines_e(lines)
        s = join_lines(lines)
        scores[i] = score_lines(lines)
        if cache.get(s):
            cycle_length = i - cache.get(s) - 1
            cycle_start = cache.get(s)
            print('Cycle starts at',cycle_start,'with length',cycle_length)
            cycles = 1000000000
            print(cache.values())
            print(scores)
            return scores[(cycles - cycle_start) % cycle_length + cycle_start]

        cache[s] = i

    dump_lines(lines,str(i))

  print(i)
  print(cache.values())
  print(scores)
  return 0#scores[1000000000 % i]

  
print("Star 2:", star_2("sample.txt"))
#+END_SRC

#+RESULTS:
: Cycle starts at 3 with length 6
: dict_values([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
: {0: 104, 1: 87, 2: 69, 3: 69, 4: 69, 5: 65, 6: 64, 7: 65, 8: 63, 9: 68, 10: 69}
: Star 2: 69

