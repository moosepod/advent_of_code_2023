
* AOC 2023 Day 12

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 12 star 1
*** Notes
- Row by row
- . = operational # = damaged ? = unknown
- numbers are distinct groups of damaged springs.
  - Accounts for all springs.
  - Number accounts for entire group
- need a count of permutations of row
- Seems brute forceable?
*** Solution
#+BEGIN_SRC python :results output
import re
import time
import itertools

def valid(spring: str, arrangement: list[int]) -> bool:
    contiguous_blocks = []
    i = 0
    while i < len(spring):
        if spring[i] == '#':
            count = 0
            while i < len(spring) and spring[i] == '#':
                count += 1
                i += 1
            if count > 0:
                contiguous_blocks.append(count)
        else:
            i+=1

    return contiguous_blocks == arrangement
        
def star_1(path: str) -> int:
  count = 0
  with open(path,'r') as f:
    s = 0
    for row in f.read().split("\n"):
      if row:
        count += 1
        row_arrangements = 0
        springs, arrangement_s = re.search(r"^([?#.]+) ([\d,]+)$", row.strip()).groups()
        arrangements = [int(x) for x in arrangement_s.split(",")]
        spring_indexes = [i for i in range(0,len(springs)) if springs[i] == '?']

        # Brute force
        for l in range(0,len(spring_indexes)+1):
            for indexes in itertools.combinations(spring_indexes, l):
                ts = ""
                for i in range(0,len(springs)):
                    if not springs[i] == '?':
                        ts += springs[i] 
                    else:
                        if i in indexes:
                            ts += '#'
                        else:
                            ts += '.'

                if valid(ts,arrangements):
                    row_arrangements += 1

        s += row_arrangements

        #return 0

  return s, count

t = time.time()
result, count = star_1('input.txt')
elapsed = time.time() - t
print(f"Star 1: {result} in {elapsed:.4f}s resulting in {elapsed/count:.4f}s per iteration ")

#+END_SRC

#+RESULTS:
: Star 1: 7653 in 23.8801s resulting in 0.0239s per iteration 

** Day 12 star 2
*** Problem statement
*** Solution
#+BEGIN_SRC python :results output
def star_2(path: str) -> int:
  with open(path,'r') as f:
     pass
  return 0
  
print("Star 2:", star_2("sample.txt"))
#+END_SRC

