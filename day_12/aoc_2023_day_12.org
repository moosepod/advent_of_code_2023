
* AOC 2023 Day 12

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 12 star 1
*** Notes
- Row by row
- . = operational # = damaged ? = unknown
- numbers are distinct groups of damaged springs.
  - Accounts for all springs.
  - Number accounts for entire group
- need a count of permutations of row
- Seems brute forceable?
*** Solution
#+BEGIN_SRC python :results output
import re
import itertools

def valid(spring: str, arrangement: list[int]) -> bool:
    
    
    spring = '.' + spring + '.'
    print('Checking',spring)
    for arrangement in arrangement:
        target = '.' + ('#' * arrangement) + '.'
        if target not in spring:
            print(target,'not found in ',spring)
            return False
        
        spring = re.sub(target,'!',spring, count=1)

    return '#' not in spring and '?' not in spring
        
def star_1(path: str) -> int:
  with open(path,'r') as f:
    s = 0
    for row in f.read().split("\n"):
      if row:
        row_arrangements = 0
        springs, arrangement_s = re.search(r"^([?#.]+) ([\d,]+)$", row.strip()).groups()
        arrangements = [int(x) for x in arrangement_s.split(",")]
        spring_indexes = [i for i in range(0,len(springs)) if springs[i] == '?']

        # Brute force
        for l in range(0,len(spring_indexes)):
            for indexes in itertools.combinations(spring_indexes, l):
                ts = ""
                for i in range(0,len(springs)):
                    if not springs[i] == '?':
                        ts += springs[i] 
                    else:
                        if i in indexes:
                            ts += '#'
                        else:
                            ts += '.'
                if valid(ts,arrangements):
                    row_arrangements += 1

        print(springs,'|',arrangements,'|',spring_indexes,'|',row_arrangements, valid(springs,arrangements))
        s += row_arrangements

        return 0

  return s
  
print("Star 1:",star_1("sample_1.txt"))

#+END_SRC

#+RESULTS:
#+begin_example
Checking .....###.
.#. not found in  .....###.
Checking .#...###.
.#. not found in  !..###.
Checking ..#..###.
.#. not found in  .!.###.
Checking ...#.###.
.#. not found in  ..!###.
Checking .##..###.
.#. not found in  .##..###.
Checking .#.#.###.
.#. not found in  !#.###.
Checking ..##.###.
.#. not found in  ..##.###.
Checking .???.###.
.#. not found in  .???.###.
???.### | [1, 1, 3] | [0, 1, 2] | 0 False
Star 1: 0
#+end_example

** Day 12 star 2
*** Problem statement
*** Solution
#+BEGIN_SRC python :results output
def star_2(path: str) -> int:
  with open(path,'r') as f:
     pass
  return 0
  
print("Star 2:", star_2("sample.txt"))
#+END_SRC

