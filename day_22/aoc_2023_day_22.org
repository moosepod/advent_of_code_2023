Ee
* AOC 2023 Day 22

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 22 star 1
*** Notes

#+begin_example
012345
..D.EE
.CCCCF
AAABBB
#+end_example

#+begin_example
012345
..DD..
..CE..
.BBE..
.AAAA.
#+end_example


*** Solution
#+BEGIN_SRC python :results output
import re
import time
from d22_utils import Grid, P,S,dump_grid_x, dump_grid_y
from pydantic import BaseModel, model_validator

def p_from_a(a: list):
    return P(x=int(a[0]),y=int(a[1]),z=int(a[2]))

def b_to_c(n: int) -> str:
    return chr(n+64)

class Brick(BaseModel):
    a: P
    b: P
    n: int

    @model_validator(mode="after")
    @classmethod
    def check_point_ordering(cls, data: any) -> any:
        if data.a.x > data.b.x:
            raise ValueError("a.x is bigger than b.x")
        if data.a.y > data.b.y:
            raise ValueError("a.y is bigger than b.y")
        if data.a.z > data.b.z:
            raise ValueError("a.z is bigger than b.z")
        return data
    
    def add(self,grid: Grid):
        for x in range(self.a.x, self.b.x+1):
            for y in range(self.a.y,self.b.y+1):
                for z in range(self.a.z, self.b.z+1):
                    grid.cells[P(x=x,y=y,z=z)] = self.n

    def remove(self,grid: Grid):
        for x in range(self.a.x, self.b.x+1):
            for y in range(self.a.y,self.b.y+1):
                for z in range(self.a.z, self.b.z+1):
                    grid.cells[P(x=x,y=y,z=z)] = None

    def resting_on(self,grid: Grid) -> set:
        touching = set()
        min_z = min(self.a.z, self.b.z)
        for x in range(self.a.x, self.b.x+1):
            for y in range(self.a.y, self.b.y+1):
                t = grid.cells.get(P(x=x,y=y,z=min_z-1))
                if t and t != self.n:
                    touching.add(t)

        return touching

    def drop(self, grid: Grid) -> bool:
        min_z = min(self.a.z, self.b.z)
        moved = False
        
        if min_z > 1:
            self.remove(grid)
            while min_z > 1 and not self.resting_on(grid):
                self.a.z-=1
                self.b.z-=1
                moved = True
                min_z = min(self.a.z, self.b.z)
            self.add(grid)
             
        return moved

def sole_support(n: int, supports: dict, supported: dict, debug=False) -> bool:
    c = 0
    for sb in supports[n]:
        if debug: print('...',b_to_c(sb),supported[sb])
        if len([x for x in supported[sb] if x != n]) > 0:
            if debug: print(f"....{b_to_c(sb)} supported by other brick {b_to_c(n)}")
            c +=1

    return c == len(supports[n])

def support_count(n: int, supports: dict, supported: dict, debug=False) -> int:
    total = 0

    for sb in supports[n]:
        if sole_support(sb, supports, supported, debug=debug):
            if debug: print(f"...{b_to_c(n)} is sole support for {b_to_c(sb)}")
            total += 1
            total += support_count(sb, supports, supported, debug=debug)
    
    return total

def calculate(path: str,debug=False) -> tuple:
  with open(path,'r') as f:
      bricks = []
      m = P()
      n = 1
      for l in f.read().split("\n"):
          if l:
              a,b = l.strip().split("~")
              brick = Brick(n=n, a=p_from_a(a.split(",")),b=p_from_a(b.split(",")))
              bricks.append(brick)
              if brick.a.x > m.x: m.x = brick.a.x
              if brick.b.x > m.x: m.x = brick.b.x
              if brick.a.y > m.y: m.y = brick.a.y
              if brick.b.y > m.y: m.y = brick.b.y
              if brick.a.z > m.z: m.z = brick.a.z
              if brick.b.z > m.z: m.z = brick.b.z
              n+=1
      grid = Grid(cells={},size=S(width=m.x+1, height=m.y+1, depth=m.z+1), blocked=[])
      for brick in bricks:
         brick.add(grid)

      if debug:
          print("-- Before drop --")
          print(" x ")
          print("012")
          dump_grid_x(grid)
      
          print(" y ")
          print("012")
          dump_grid_y(grid)

      moved = True
      i = 0

      while moved:
          i+=1
          moved = False
          for brick in bricks:
              if brick.drop(grid):
                  moved = True
      print('Took',i,'iterations')
      if debug:
          print("-- After drop --")
          print(" x ")
          print("012")
          dump_grid_x(grid)
          print(" y ")
          print("012")
          dump_grid_y(grid)

      supports = {brick.n: [] for brick in bricks}
      supported = {brick.n: [] for brick in bricks}
      
      for brick in bricks:
          for b in list(brick.resting_on(grid)):
              if debug: print(f"{b_to_2(brick.n)} is resting on {b_to_c(b)}")
              supports[b].append(brick.n)
              supported[brick.n].append(b)

      removeable = {brick.n: len(supports[brick.n]) == 0 for brick in bricks}
      for n in [n for n, v in removeable.items() if not v]:
          if not removeable[n]:
              if debug: print(b_to_c(n), supports[n])
              removeable[n] = sole_support(n, supports, supported, debug=debug)

      if debug:
          for n, r in removeable.items():
              if r:
                  print(f"Brick {b_to_c(n)} can be removed.")
              else:
                  print(f"Brick {b_to_c(n)} cannot be removed.")

      return removeable, supports, supported, grid
      
  
def star_1(path: str, debug: bool) -> int:
  removeable, supports, supported, grid = calculate(path, debug)
  return len([x for x,v in removeable.items() if v])
    
#print("Star 1:",star_1("sample_3.txt",debug=False))

def star_2(path: str, debug: bool) -> int:
  t = time.time()
  removeable, supports, supported, grid = calculate(path, debug)
  total = 0
  
  for nr in [x for x,v in removeable.items() if not v]:
      c =  support_count(nr, supports, supported, debug)
      if debug: print(b_to_c(nr), c)
      total += c
  print(f"Elapsed: {time.time() - t:.2f}")
  return total

print("Star 2:",star_2("input.txt",debug=False))

#+END_SRC

#+RESULTS:
: Took 89 iterations
: Elapsed: 3.62
: Star 2: 544

** Too high
: Star 1: 612

** Part 2 too low
544

