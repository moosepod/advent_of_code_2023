
* AOC 2023 Day 5

f** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Problem statement

The almanac (your puzzle input) lists all of the seeds that need to be
planted. It also lists what type of soil to use with each kind of
seed, what type of fertilizer to use with each kind of soil, what type
of water to use with each kind of fertilizer, and so on. Every type of
seed, soil, fertilizer and so on is identified with a number, but
numbers are reused by each category - that is, soil 123 and fertilizer
123 aren't necessarily related to each other.

For example:

| seeds: | 79 | 14 | 55 | 13 |

seed-to-soil map:
| 50 | 98 |  2 |
| 52 | 50 | 48 |

soil-to-fertilizer map:
|  0 | 15 | 37 |
| 37 | 52 |  2 |
| 39 |  0 | 15 |

fertilizer-to-water map:
| 49 | 53 |  8 |
|  0 | 11 | 42 |
| 42 |  0 |  7 |
| 57 |  7 |  4 |

water-to-light map:
| 88 | 18 |  7 |
| 18 | 25 | 70 |

light-to-temperature map:
| 45 | 77 | 23 |
| 81 | 45 | 19 |
| 68 | 64 | 13 |

temperature-to-humidity map:
| 0 | 69 |  1 |
| 1 |  0 | 69 |

humidity-to-location map:
| 60 | 56 | 37 |
| 56 | 93 |  4 |

The almanac starts by listing which seeds need to be planted: seeds
79, 14, 55, and 13.

The rest of the almanac contains a list of maps which describe how to
convert numbers from a source category into numbers in a destination
category. That is, the section that starts with seed-to-soil map:
describes how to convert a seed number (the source) to a soil number
(the destination). This lets the gardener and his team know which soil
to use with which seeds, which water to use with which fertilizer, and
so on.

Rather than list every source number and its corresponding destination
number one by one, the maps describe entire ranges of numbers that can
be converted. Each line within a map contains three numbers: the
destination range start, the source range start, and the range length.

Consider again the example seed-to-soil map:

| 50 | 98 |  2 |   
| 52 | 50 | 48 |   

The first line has a destination range start of 50, a source range
start of 98, and a range length of 2. This line means that the source
range starts at 98 and contains two values: 98 and 99. The destination
range is the same length, but it starts at 50, so its two values are
50 and 51. With this information, you know that seed number 98
corresponds to soil number 50 and that seed number 99 corresponds to
soil number 51.

The second line means that the source range starts at 50 and contains
48 values: 50, 51, ..., 96, 97. This corresponds to a destination
range starting at 52 and also containing 48 values: 52, 53, ...,
98, 99. So, seed number 53 corresponds to soil number 55.

Any source numbers that aren't mapped correspond to the same
destination number. So, seed number 10 corresponds to soil number 10.

So, the entire list of seed numbers and their corresponding soil
numbers looks like this:

| seed | soil |
|    0 |    0 |
|    1 |    1 |
|  ... |  ... |
|   48 |   48 |
|   49 |   49 |
|   50 |   52 |
|   51 |   53 |
|  ... |  ... |
|   96 |   98 |
|   97 |   99 |
|   98 |   50 |
|   99 |   51 |

With this map, you can look up the soil number required for each
initial seed number:

- Seed number 79 corresponds to soil number 81.
- Seed number 14 corresponds to soil number 14.
- Seed number 55 corresponds to soil number 57.
- Seed number 13 corresponds to soil number 13

*** Notes
- Input numbers are very big. Makes sense to only pay attention to plantable seeds.
  
** Load and validate data
#+BEGIN_SRC python :session session_day_5a :results value
from pydantic import BaseModel
import re
import pandas as pd
try:
  class Range(BaseModel):
    start: int
    end: int
    offset: int = 0

    def contains(self, n: int):
      return n >= self.start and n <= self.end

    def clone(self):
      return Range(start=self.start,end=self.end,offset=self.offset)

    def overlaps(self,r) -> bool:
      return not (self.end < r.start or self.start > r.end)

    def contains(self, r) -> bool:
      return r.start >= self.start and r.end <= self.end

    def intersection(self, r) -> Range | None:
      r = Range(start=max(self.start, r.start),end=min(self.end, r.end),offset=self.offset+r.offset)
      if r.start < r.end:
        return r
      return None

    def __hash__(self) -> str:
      return hash(f'{self.start}-{self.end}-{self.offset}')
    
  class Seed(BaseModel):
    seed: int
    soil: int=0
    fertilizer: int=0
    water: int=0
    light: int=0
    temperature: int=0
    humidity:int=0
    location: int=0

  class Data(BaseModel):
    seeds: list[Seed]
    mappings: list[tuple]
    ranges: dict[tuple[str,str], list[Range]]

    def values(self):
      # Let's experiment with table in org mode results!
      a = [["Seed","Soil","Fertilizer","Water","Light","Temperature","Humidity","Location"]]
      
      a.extend([[seed.seed, seed.soil, seed.fertilizer,seed.water,seed.light,
              seed.temperature, seed.humidity, seed.location] for seed in self.seeds])

      return a

  def process_seeds(current_map: tuple, dest_start: int, source_start: int , l: int , seeds: list[Seed]):
                      
    for seed in seeds:
      source = getattr(seed, current_map[0])
      if source >= source_start and source < source_start + l:
        dest = dest_start + (source - source_start)
        setattr(seed, current_map[1], dest)

  def load_data(path) -> Data:
    seeds=[]
    ranges = {}
    mappings = []
    current_map = None
    with open(path) as f:
      for row in f.read().split("\n"):
        row = row.strip()
        if not current_map:
          m = re.match("seeds: (.+)", row)
          if m:
            seeds=[Seed(seed=int(n)) for n in m.group(1).split(' ')]
          current_map=("nothing","seeds")
        else:
          m = re.match("(\w+)-to-(\w+) map:",row)
          if m:
            current_map = ((m.group(1)), m.group(2))
            # Initalize values
            for seed in seeds:
              setattr(seed,m.group(2), getattr(seed, m.group(1)))
            ranges[current_map] = []
            mappings.append(current_map)
            continue
          m = re.match("(\d+) (\d+) (\d+)", row)
          if m:
            dest_start, source_start, l = [int(x) for x in m.groups()]
            ranges[current_map].append(Range(start=source_start,
                                             end=source_start+l-1,
                                             offset=dest_start-source_start))
            #print(current_map, ranges[current_map][-1])
            process_seeds(current_map, dest_start, source_start, l, seeds)

    for v in ranges.values():
      v.sort(key=lambda x:x.start)
    return Data(seeds=seeds,ranges=ranges, mappings=mappings)

  data = load_data("input.txt")
  print(data.values())
except Exception as e:
  print("Error:",e)
data.values()
#+END_SRC

#+RESULTS:
|       Seed |       Soil | Fertilizer |      Water |      Light | Temperature |   Humidity |   Location |
|  919339981 | 1207346789 |  347905731 | 1590062784 | 2626966462 |  2075442149 | 1928759079 | 1287215595 |
|  562444630 | 2673932408 |  868203614 |  185404129 |  529679060 |   924776077 |  871288015 | 2210756272 |
| 3366006921 | 3366006921 | 1463141451 |  954159079 |  187330696 |   582427713 | 1598187509 | 3615278925 |
|   67827214 | 1563148127 | 3923332414 | 1998915529 | 1387168782 |  1788466234 | 1718052072 |  378361518 |
| 1496677366 | 2372696839 |  566968045 | 3860617465 | 2522050512 |  1970526199 |  279188743 | 2716560539 |
|  101156779 | 1596477692 | 3956661979 | 2032245094 | 1420498347 |  2205889165 |   71710860 | 4142405792 |
| 4140591657 | 4140591657 | 2607378779 | 3443907209 | 3834172737 |  3738564780 | 3451943713 | 1013518473 |
|    5858311 | 1501179224 | 3030484483 |  579005820 |  923280751 |  1127390324 | 2253112924 | 1653623890 |
| 2566406753 | 2507699500 |  701970706 | 3995620126 | 2947115902 |  1345817919 |  402316681 | 2927978869 |
|   71724353 | 1567045266 | 3927229553 | 2002812668 | 1391065921 |  1792363373 | 1721949211 |  382258657 |
| 2721360939 | 2721360939 |  915632145 |  232832660 |  577107591 |   100356533 | 1116116329 | 3213843288 |
|   35899538 | 1531220451 | 3891404738 | 1966987853 | 1355241106 |  1756538558 | 1686124396 |  346433842 |
|  383860877 |  483651822 | 2138350281 | 2787408244 | 4133542746 |  4037934789 | 3540821413 | 1102396173 |
|  424668759 |  524459704 | 2179158163 | 2828216126 | 4174350628 |  4078742671 | 3581629295 | 1856435158 |
| 3649554897 | 3649554897 | 3108525329 | 3184200876 | 3574466404 |  3478858447 | 2968043771 | 2450179186 |
|  442182562 |  541973507 | 2196671966 | 2845729929 | 4191864431 |  4096256474 | 3599143098 | 1873948961 |
| 2846055542 | 2846055542 | 1040326748 |  737918683 |  315365231 |   710462248 |  656974186 |  471665171 |
|   49953829 | 1545274742 | 3905459029 | 1981042144 | 1369295397 |  1770592849 | 1700178687 |  360488133 |
| 2988140126 | 2988140126 | 1134088300 | 4123571376 | 1087418299 |  1488715751 | 2081686346 |  647772167 |
|  256306471 | 1751627384 | 4111811671 | 2568632764 | 1956886017 |  2742276835 | 2742276835 | 1822648163 |


** Day 5 star 1
*** Problem statement

The gardener and his team want to get started as soon as possible, so
they'd like to know the closest location that needs a seed. Using
these maps, find the lowest location number that corresponds to any of
the initial seeds. To do this, you'll need to convert each seed number
through other categories until you can find its corresponding location
number. In this example, the corresponding types are:

- Seed 79, soil 81, fertilizer 81, water 81, light 74, temperature 78, humidity 78, location 82.
- Seed 14, soil 14, fertilizer 53, water 49, light 42, temperature 42, humidity 43, location 43.
- Seed 55, soil 57, fertilizer 57, water 53, light 46, temperature 82, humidity 82, location 86.

- Seed 13, soil 13, fertilizer 52, water 41, light 34, temperature 34, humidity 35, location 35.

So, the lowest location number in this example is 35.

What is the lowest location number that corresponds to any of the
initial seed numbers?

*** Solution
#+BEGIN_SRC python :session session_day_5a :results output
try:
  def star_1(data: Data) -> int:
      return min([seed.location for seed in data.seeds])
  
  print(star_1(data))
except Exception as e:
  print("Error:",e)
#+END_SRC

#+RESULTS:
: 346433842

** Day 5 star 2
*** Problem statement

Everyone will starve if you only plant such a small number of
seeds. Re-reading the almanac, it looks like the seeds: line actually
describes ranges of seed numbers.

The values on the initial seeds: line come in pairs. Within each pair,
the first value is the start of the range and the second value is the
length of the range. So, in the first line of the example above:

seeds: 79 14 55 13

This line describes two ranges of seed numbers to be planted in the
garden. The first range starts with seed number 79 and contains 14
values: 79, 80, ..., 91, 92. The second range starts with seed number
55 and contains 13 values: 55, 56, ..., 66, 67.

Now, rather than considering four seed numbers, you need to consider a
total of 27 seed numbers.

In the above example, the lowest location number can be obtained from
seed number 82, which corresponds to soil 84, fertilizer 84, water 84,
light 77, temperature 45, humidity 46, and location 46. So, the lowest
location number is 46.

Consider all of the initial seed numbers listed in the ranges on the
first line of the almanac. What is the lowest location number that
corresponds to any of the initial seed numbers?

*** Alternative approach to star 1/star 2
#+BEGIN_SRC python :session session_day_5a :results output
try:
    def extract_seeds(s: str) -> list[int]:
        m = re.match("seeds: (.+)", s)
        return [int(n) for n in m.group(1).split(' ')]
    
    def star_1_map(path: str) -> int:
        lines = []
        with open(path,'r') as f:
            lines = f.read().split("\n")

        source = [extract_seeds(l) for l in lines if l.startswith("seeds: ") ][0]
        mappings = []
        current_map = []
        for line in lines[2:]:
            if line:
                if line.endswith("map:"):
                    mappings.append([])
                else:
                    a = [int(x) for x in line.strip().split(" ")]
                    mappings[-1].append((a[1],a[1]+a[2]-1,a[0]-a[1]))

        for mapper in mappings:
            for i in range(0,len(source)):
                n = source[i]
                for m in mapper:
                    if n >= m[0] and n <= m[1]:
                        source[i] += m[2]
                        break
                    
        return min(source)

    def star_2_map(path: str) -> int:
        lines = []
        with open(path,'r') as f:
            lines = f.read().split("\n")

        source = [extract_seeds(l) for l in lines if l.startswith("seeds: ") ][0]
        ranges = [(source[i],source[i]+source[i+1]-1) for i in range(0,len(source),2)]

        mappings = []
        current_map = []
        for line in lines[2:]:
            if line:
                if line.endswith("map:"):
                    mappings.append([])
                else:
                    a = [int(x) for x in line.strip().split(" ")]
                    mappings[-1].append((a[1],a[1]+a[2]-1,a[0]-a[1]))

        for mapper in mappings[:-1]:
            print(mapper)
            for i in range(0,len(ranges)):
                n = ranges[i]
                for m in mapper:
                    s = (max(m[0],n[0]),min(m[1],n[1]))
                    if s[0] <s[1]:
                        ranges.append((n[0],s[0]-1))
                        ranges.append((s[0]+m[2], s[1]+m[2]))
                        ranges.append((n[1]+1,s[1]))
                        break
                    
        return lowest

    print(star_2_map("sample.txt"))
except Exception as e:
    print("Error:",e)
#+END_SRC

#+RESULTS:
: [(98, 99, -48), (50, 97, 2)]
: [(15, 51, -15), (52, 53, -15), (0, 14, 39)]
: [(53, 60, -4), (11, 52, -11), (0, 6, 42), (7, 10, 50)]
: [(18, 24, 70), (25, 94, -7)]
: [(77, 99, -32), (45, 63, 36), (64, 76, 4)]
: [(69, 69, -69), (0, 68, 1)]
: Error: name 'lowest' is not defined

*** Yet another approach to star 1
#+BEGIN_SRC python :session session_day_5a :results output
import re
try:
    def star_1(path: str) -> int:
        with open(path,'r') as f:
            text = f.read()
            seeds = [int(n) for n in re.match(f"seeds: (.+)", text).group(1).split(' ')]

            for mappings in re.findall(f"(\w+)-to-(\w+) map:\n(.+?)\n\n", text, re.DOTALL):
                new_seeds = []
                for seed in seeds:
                    found = False
                    for mapping in mappings[2].split("\n"):
                        if mapping:
                            dest, src, count = [int(x) for x in mapping.split(' ')]
                            if seed >= src and seed < src + count:
                                new_seeds.append(seed + dest - src)
                                found = True
                                break
                    if not found:
                        new_seeds.append(seed)
                seeds = new_seeds
                
            return min(seeds)
           
    print(f"sample.txt: {star_1('sample.txt')}")
    print(f"input.txt:  {star_1('input.txt')}")
except Exception as e:
    print("Error:",e)

#+END_SRC

#+RESULTS:
: sample.txt: 35
: input.txt:  346433842

a - seed
b - range

a1 -- a2
           b1  -- b2 
(a1,a2),(b1,b2)

	   a1 -- a2
b1 -- b2

(a1,a2),(b1,b2)

---

min(a1,b1) -> max(b1,a1)
min(a2,b2) -> max(a2,b2)
max(b1,a1) -> min(a2,b2)

a1 -- a2
   b1 -- b2
(a1,b1) [S], (b1,a2)[O],(a2,b2)
- (a1, b1), (b1, a2), (a2, b2)

   a1 -- a2
b1 -- b2
(b1-a1) (a1,b2)[O] (b2,a2)[S]
- (b1, a1), (a1, b2), (b2,a2)
  

      a1 --- a2
b1 ---------------- b2
(b1,a1), (a1,a2), (a2,b2)
- (b1, a1), (a1,a2)[O] , (a2, b2)
  

a1 ---------------- a2
      b1 -- b2
(a1,b1), (b1,b2), (b2, a1)

- (a1, b1)[S],(b1,b2)[O]  (b2, a2)[S]  


h(t(l(w(f(s(x))))))


79 92


*** Yet another approach to star 2
**** Just not clear why this doesn't work? NEXT STEP -- check logic of each step
#+BEGIN_SRC python :results output
import re
try:
    def intersect(l1: tuple[int,int], l2: tuple[int,int]) -> bool:
        return max([l1[0],l2[0]]) < min([l1[1],l2[1]])
        
    def star_2(path: str) -> int:
        with open(path,'r') as f:
            text = f.read()
            seeds = [int(n) for n in re.match(f"seeds: (.+)", text).group(1).split(' ')]
            seed_ranges = [(seeds[i],seeds[i]+seeds[i+1]-1) for i in range(0,len(seeds),2)]

            for mappings in re.findall(f"(\w+)-to-(\w+) map:\n(.+?)\n\n", text, re.DOTALL):
                new_seed_ranges = []
                for seed_start,seed_end in seed_ranges:
                    found = False
                    for mapping in mappings[2].split("\n"):
                        
                        if mapping:
                            dest, mapping_start, count = [int(x) for x in mapping.split(' ')]
                            mapping_end = mapping_start + count-1
                                                                                    
                            if intersect((seed_start,seed_end),(mapping_start,mapping_end)):
                                found = True
                                temp = [(min(seed_start, mapping_start),max(seed_start,mapping_start)),
                                (max(seed_start, mapping_start),min(seed_end,mapping_end)),
                                (min(seed_end, mapping_end),max(seed_end,mapping_end))]

                                for start, end in temp:
                                    if intersect((seed_start,seed_end),(start,end)):
                                        if intersect((mapping_start,mapping_end),(start,end)):
                                            offset = dest - mapping_start
                                            new_seed_ranges.append((start+offset,end+offset))
                                        else:
                                            new_seed_ranges.append((start,end))

                                break
                    if not found:
                        new_seed_ranges.append((seed_start, seed_end),)

                # Clean up any overlapping ranges
                seed_ranges = []
                seed_ranges = new_seed_ranges
                #print(mappings[0],seed_ranges)
                
            return min([x[0] for x in seed_ranges])


    #print(f"sample.txt: {star_2('sample.txt')}")
    print(f"input.txt:  {star_2('input.txt')}")
except Exception as e:
    print("Error:",e)

# : input.txt:  87968959 -- too high
#+END_SRC

#+RESULTS:
: input.txt:  87968958

** Another try, building up some primitives first
#+BEGIN_SRC python :results values
from utils import P, R

def sort_of_tests() -> list[tuple[str,str,str]]:
    results = [("Test","Expected","Got")]
    results.append(("R: Init", "a=1 b=2", str(R(a=1,b=2))))
    try:
        R(a=2,b=1)
        results.append(("R: Validation", "ValueError","No error"))
    except ValueError:
        results.append(("R: Validation", "ValueError","ValueError"))

    results.append(("R: Overlap","False",R(a=1,b=3).overlap(R(a=4,b=6))))
    results.append(("R: Overlap","False",R(a=4,b=6).overlap(R(a=1,b=3))))
    results.append(("R: Overlap","True",R(a=1,b=3).overlap(R(a=3,b=5))))
    results.append(("R: Overlap","True",R(a=3,b=5).overlap(R(a=1,b=3))))
    results.append(("R: Overlap","True",R(a=1,b=3).overlap(R(a=1,b=3))))
    results.append(("R: Overlap","True",R(a=1,b=3).overlap(R(a=1,b=3))))
    results.append(("R: Overlap","True",R(a=1,b=3).overlap(R(a=0,b=2))))
    results.append(("R: Overlap","True",R(a=0,b=2).overlap(R(a=1,b=3))))
    results.append(("R: Contains","False", 0 in R(a=1,b=3)))
    results.append(("R: Contains","True", 1 in R(a=1,b=3)))
    results.append(("R: Contains","True", 2 in R(a=1,b=3)))
    results.append(("R: Contains","True", 3 in R(a=1,b=3)))
    results.append(("R: Contains","False", 4 in R(a=1,b=3)))
    results.append(("R: Contains","False", 'a' in R(a=1,b=3)))
    results.append(("R: Contains","True", 2.0 in R(a=1,b=3)))
    
    return results

return sort_of_tests()
#+END_SRC

#+RESULTS:
| Test          | Expected   | Got        |
| R: Init       | a=1 b=2    | a=1 b=2    |
| R: Validation | ValueError | ValueError |
| R: Overlap    | False      | False      |
| R: Overlap    | False      | False      |
| R: Overlap    | True       | True       |
| R: Overlap    | True       | True       |
| R: Overlap    | True       | True       |
| R: Overlap    | True       | True       |
| R: Overlap    | True       | True       |
| R: Overlap    | True       | True       |
| R: Contains   | False      | False      |
| R: Contains   | True       | True       |
| R: Contains   | True       | True       |
| R: Contains   | True       | True       |
| R: Contains   | False      | False      |
| R: Contains   | False      | False      |
| R: Contains   | True       | True       |

** Star one, redux

*** Notes
| seeds: | 79 | 14 | 55 | 13 |

seed-to-soil map:
| 50 | 98 |  2 |
| 52 | 50 | 48 |

soil-to-fertilizer map:
|  0 | 15 | 37 |
| 37 | 52 |  2 |
| 39 |  0 | 15 |

...

#+BEGIN_SRC python :results values
import re
from utils import P,R
def star_1(path: str):
    with open(path,'r') as f:
        text = f.read()
        seeds = [int(n) for n in re.match(f"seeds: (.+)", text).group(1).split(' ')]

        for mappings in re.findall(r"(\w+)-to-(\w+) map:\n(.+?)\n\n", text, re.DOTALL):
            stage_from, stage_to, mapping_text = mappings
            for seed_idx in range(0, len(seeds)):
                for mapping in mapping_text.strip().split('\n'):
                    dest,src,count = [int(x) for x in mapping.split(' ')]
                    if seeds[seed_idx] in R(a=src,b=src+count):
                        seeds[seed_idx] += dest - src
                        break
            
    return min(seeds)

return star_1("input.txt")
#+END_SRC

#+RESULTS:
: 346433842
