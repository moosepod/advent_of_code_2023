
* AOC 2023 Day 23

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 23 star 1
*** Solution
#+BEGIN_SRC python :results output
from pydantic import BaseModel
import re
from d23_utils import P,Grid, dump_grid,S, UP,DOWN,LEFT,RIGHT,PriorityQueue

class Vertex(BaseModel):
    p: P
    c: str
    paths: list[list[str]]
    edges: list["Vertex"]

    def __lt__(self,v):
        return v.p.x < self.p.x and v.p.y < self.p.y

    def __hash__(self):
        return hash(f"{self.p.x}-{self.p.y}")

def path_from_dict( came_from: dict, end: P) -> list[P]:
    p = end
    path = []
    while p:
        path.append(came_from[p])
        p = came_from[p]

    return path

def pathfind_d(graph: dict[P,Vertex], start: P, end: P) -> list[P]:
    frontier = PriorityQueue()
    frontier.put(graph.get(start), 0)
    came_from = {start: None}
    cost_so_far = {start: 0}

    while not frontier.empty():
        current = frontier.get()

        if current.p == end:
            return path_from_dict(came_from, end)

        for n in current.edges:
            new_cost = cost_so_far[current.p] + 1
            if n not in cost_so_far or new_cost > cost_so_far[n]:
                cost_so_far[n] = new_cost
                frontier.put(graph.get(n), new_cost)
                came_from[n] = current.p

    return []

def follow_to_node(graph: dict[P,Vertex], start: P, end: P, nodes: dict[P,Vertex]) -> list[P]:
    v = start
    path = [start]
    while v != end and not nodes.get(v):
        for edge in graph[v].edges:
            if edge not in path:
                path.append(edge)
                v = graph[edge].p

    return path

def add_node_lengths(graph: dict[P,Vertex], start: P, end: P):
    candidates = [start]
    visited = set()
    visited.add(start)

    while candidates:
        current = candidates[0]
        del candidates[0]
        visited.add(current)
        path = follow_to_node(graph, current, end)
        if path:
           for p in path:
               visited.add(p)
           graph[current].paths.append(path)
           path_end = path[-1]
           for edge in graph[path_end].edges:
               if edge not in visited:
                   candidates.insert(0,edge)

def find_longest(graph: dict[P,Vertex], start: P, end: P, nodes: dict[P,Vertex],current_l=0) -> int:
    path = follow_to_node(graph,start,end,nodes)
    if path[-1] == end:
        return len(path) + current_l - 1

    longest = 0
    for edge in graph[path[-1]].edges:
        l = find_longest(graph, edge, end, nodes, current_l+len(path))
        if l > longest:
            longest = l

    return longest
                
def pathfind(graph: dict[P,Vertex], start: P, end: P, current_path: [], all_paths: [],indent=0):
    candidates = PriorityQueue()
    candidates.put(start, 0)
    #visited = set()
    paths = {start: []}
    
    while not candidates.empty():
        print()
        current = candidates.get()        
        for edge in graph[current].edges:
            if edge not in paths.get(current):
                next_path = [x for x in paths.get(current)]
                next_path.extend(follow_to_node(graph, edge, end))
                path_end = next_path[-1]
                paths[path_end] = next_path
                if path_end == end:
                    all_paths.append(next_path)
                else:
                    candidates.put(path_end,0)
    
    
def star_1(path: str) -> int:
  with open(path,'r') as f:
      graph: dict[P,Vertex] = {}
      nodes: dict[P,Vertex] = {}
      s = S(width=0,height=0)
      for y, line in enumerate(f.read().split("\n")):
          s.height += 1
          if line:
              if not s.width:
                  s.width = len(line)
              for x,c in enumerate(line):
                  if c != '#':
                      p = P(x=x,y=y)
                      graph[p] = Vertex(p=p,edges=[],c=c, paths=[])

      for v in graph.values():
          if v.c == ">": v.edges.append(v.p + RIGHT)
          if v.c == "<": v.edges.append(v.p + LEFT)
          if v.c == "^": v.edges.append(v.p + UP)
          if v.c == "v": v.edges.append(v.p + DOWN)
          if v.c == ".":
              sides = 0
              if graph.get(v.p+UP): sides+=1
              if graph.get(v.p+DOWN): sides+=1
              if graph.get(v.p+LEFT): sides+=1
              if graph.get(v.p+RIGHT): sides+=1
              if graph.get(v.p+UP) and graph.get(v.p+UP).c != "v": v.edges.append(v.p+UP)
              if graph.get(v.p+DOWN) and graph.get(v.p+DOWN).c != "^": v.edges.append(v.p+DOWN)
              if graph.get(v.p+LEFT) and graph.get(v.p + LEFT).c != ">": v.edges.append(v.p+LEFT)
              if graph.get(v.p+RIGHT) and graph.get(v.p + RIGHT).c != "<": v.edges.append(v.p+RIGHT)
          if sides > 2 and len(v.edges) > 1:
              nodes[v.p] = v

      start = P(x=1,y=0)
      end = P(x=21,y=22)

      return find_longest(graph,start,end, nodes)
      #path = follow_to_node(graph,start,end, nodes)
      #path.extend(follow_to_node(graph,graph[path[-1]].edges[1],end,nodes))
          

      debug_grid = Grid(cells={},size=s,blocked=[])
      for p in debug_grid.points():
          if graph.get(p):
              debug_grid.cells[p] = graph[p].c
          else:
              debug_grid.cells[p] = "#"

      path = {p:"X" for p in nodes.keys()}
      dump_grid(debug_grid,path)

  return len(nodes)
  


print("Star 1:",star_1("input.txt"))

#+END_SRC

#+RESULTS:
: Star 1: 94

