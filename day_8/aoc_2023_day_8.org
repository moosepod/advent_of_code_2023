
* AOC 2023 Day 8

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Problem statement

It seems like you're meant to use the left/right instructions to
navigate the network. Perhaps if you have the camel follow the same
instructions, you can escape the haunted wasteland!

After examining the maps for a bit, two nodes stick out: AAA and
ZZZ. You feel like AAA is where you are now, and you have to follow
the left/right instructions until you reach ZZZ.

This format defines each node of the network individually. For
example:

| RL               |
|                  |
| AAA = (BBB, CCC) |
| BBB = (DDD, EEE) |
| CCC = (ZZZ, GGG) |
| DDD = (DDD, DDD) |
| EEE = (EEE, EEE) |
| GGG = (GGG, GGG) |
| ZZZ = (ZZZ, ZZZ) |


** Day 8 star 1
*** Problem statement

Starting with AAA, you need to look up the next element based on the
next left/right instruction in your input. In this example, start with
AAA and go right (R) by choosing the right element of AAA, CCC. Then,
L means to choose the left element of CCC, ZZZ. By following the
left/right instructions, you reach ZZZ in 2 steps.

Of course, you might not find ZZZ right away. If you run out of
left/right instructions, repeat the whole sequence of instructions as
necessary: RL really means RLRLRLRLRLRLRLRL... and so on. For example,
here is a situation that takes 6 steps to reach ZZZ:

| LLR              |
|                  |
| AAA = (BBB, BBB) |
| BBB = (AAA, ZZZ) |
| ZZZ = (ZZZ, ZZZ) |

Starting at AAA, follow the left/right instructions. How many steps
are required to reach ZZZ?

*** Solution
#+BEGIN_SRC python :session session_day_8 :results output
try:
  import re
  def star_1(path: str) -> int:
    with open(path,"r") as f:
      L_mapping = {}
      R_mapping = {}
      lines = f.read().split("\n")
      for line in lines[2:-1]:
        if line:
          m = re.match(r"^(\w+) = \((\w+), (\w+)\)$", line.strip())
          source, l, r  = m.groups()
          L_mapping[source] = l
          R_mapping[source] = r

      node = "AAA"
      count = 0
      while node != "ZZZ":
        for instruction in lines[0]:
          count += 1
          if instruction == "R":
            node = R_mapping[node]
          else:
            node = L_mapping[node]
          if node == "ZZZ":
            break
        
    return count
  
  print(star_1("sample.txt"))
  print(star_1("sample_2.txt"))
  print(star_1("input.txt"))
except Exception as e:
  print("Error:",e)
#+END_SRC

#+RESULTS:
: 2
: 6
: 20659

** Day 8 star 2
*** Problem statement

After examining the maps a bit longer, your attention is drawn to a
curious fact: the number of nodes with names ending in A is equal to
the number ending in Z! If you were a ghost, you'd probably just start
at every node that ends with A and follow all of the paths at the same
time until they all simultaneously end up at nodes that end with Z.

For example:

|LR|
||
|11A = (11B, XXX)|
|11B = (XXX, 11Z)|
|11Z = (11B, XXX)|
|22A = (22B, XXX)|
|22B = (22C, 22C)|
|22C = (22Z, 22Z)|
|22Z = (22B, 22B)|
|XXX = (XXX, XXX)|

Here, there are two starting nodes, 11A and 22A (because they both end
with A). As you follow each left/right instruction, use that
instruction to simultaneously navigate away from both nodes you're
currently on. Repeat this process until all of the nodes you're
currently on end with Z. (If only some of the nodes you're on end with
Z, they act like any other node and you continue as normal.) In this
example, you would proceed as follows:

|Step 0: You are at 11A and 22A.|
|Step 1: You choose all of the left paths, leading you to 11B and 22B.|
|Step 2: You choose all of the right paths, leading you to 11Z and 22C.|
|Step 3: You choose all of the left paths, leading you to 11B and 22Z.|
|Step 4: You choose all of the right paths, leading you to 11Z and 22B.|
|Step 5: You choose all of the left paths, leading you to 11B and 22C.|
|Step 6: You choose all of the right paths, leading you to 11Z and 22Z.|

So, in this example, you end up entirely on nodes that end in Z after
6 steps.

Simultaneously start on every node that ends with A. How many steps
does it take before you're only on nodes that end with Z?

*** Solution
#+BEGIN_SRC python :session session_day_8 :results output
try:
  import re
  from math import prod, lcm
  def star_2(path: str) -> int:
    with open(path,"r") as f:
      mapping = {"L": {}, "R": {}}
      nodes = []
      lines = f.read().split("\n")
      for line in lines[2:-1]:
        if line:
          m = re.match(r"^(\w+) = \((\w+), (\w+)\)$", line.strip())
          source, l, r  = m.groups()
          mapping["L"][source] = l
          mapping["R"][source] = r
          if source.endswith("A"):
            nodes.append(source) 

      count = 0
      start = list(nodes)
      cycles = [()] * len(nodes)
      
      while (len([x for x in nodes if x.endswith("Z")]) != len(nodes)
             and count < 50000):
        for instruction in lines[0]:
          nodes = [mapping[instruction][n] for n in nodes]
          count+=1
          for i in range(0,len(nodes)):
            if nodes[i].endswith('Z') and not cycles[i]:
              cycles[i] = (nodes[i],count)

      t = [x[1] for x in cycles]
      n = t[0]
      for i in range(1, len(t)):
        n = lcm(n, t[i])
      return n
  
  print(star_2("input.txt"))
except Exception as e:
  print("Error:",e)
#+END_SRC

#+RESULTS:
: 15690466351717

