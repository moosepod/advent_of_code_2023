
* AOC 2023 Day 8

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Problem statement

It seems like you're meant to use the left/right instructions to
navigate the network. Perhaps if you have the camel follow the same
instructions, you can escape the haunted wasteland!

After examining the maps for a bit, two nodes stick out: AAA and
ZZZ. You feel like AAA is where you are now, and you have to follow
the left/right instructions until you reach ZZZ.

This format defines each node of the network individually. For
example:

| RL               |
|                  |
| AAA = (BBB, CCC) |
| BBB = (DDD, EEE) |
| CCC = (ZZZ, GGG) |
| DDD = (DDD, DDD) |
| EEE = (EEE, EEE) |
| GGG = (GGG, GGG) |
| ZZZ = (ZZZ, ZZZ) |


** Day 8 star 1
*** Problem statement

Starting with AAA, you need to look up the next element based on the
next left/right instruction in your input. In this example, start with
AAA and go right (R) by choosing the right element of AAA, CCC. Then,
L means to choose the left element of CCC, ZZZ. By following the
left/right instructions, you reach ZZZ in 2 steps.

Of course, you might not find ZZZ right away. If you run out of
left/right instructions, repeat the whole sequence of instructions as
necessary: RL really means RLRLRLRLRLRLRLRL... and so on. For example,
here is a situation that takes 6 steps to reach ZZZ:

| LLR              |
|                  |
| AAA = (BBB, BBB) |
| BBB = (AAA, ZZZ) |
| ZZZ = (ZZZ, ZZZ) |

Starting at AAA, follow the left/right instructions. How many steps
are required to reach ZZZ?

*** Solution
#+BEGIN_SRC python :session session_day_8 :results output
try:
  import re
  def star_1(path: str) -> int:
    with open(path,"r") as f:
      L_mapping = {}
      R_mapping = {}
      lines = f.read().split("\n")
      for line in lines[2:-1]:
        if line:
          m = re.match(r"^(\w+) = \((\w+), (\w+)\)$", line.strip())
          source, l, r  = m.groups()
          L_mapping[source] = l
          R_mapping[source] = r

      node = "AAA"
      count = 0
      while node != "ZZZ":
        for instruction in lines[0]:
          count += 1
          if instruction == "R":
            node = R_mapping[node]
          else:
            node = L_mapping[node]
          if node == "ZZZ":
            break
        
    return count
  
  print(star_1("sample.txt"))
  print(star_1("sample_2.txt"))
  print(star_1("input.txt"))
except Exception as e:
  print("Error:",e)
#+END_SRC

#+RESULTS:
: 2
: 6
: 20659

** Day 8 star 2
*** Problem statement
*** Solution
#+BEGIN_SRC python :session session_day_8 :results output
try:
  def star_2(data: Data) -> int:
      return 0
  
  print(star_2(data))
except Exception as e:
  print("Error:",e)
#+END_SRC

