
* AOC 2023 Day 19

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 19 star 1
*** Problem statement
*** Solution
#+BEGIN_SRC python :results output
import re
from pydantic import BaseModel

class Part(BaseModel):
    x: int
    m: int
    a: int
    s: int

    def rating(self):
        return self.x + self.m + self.a + self.s
    
class Filter(BaseModel):
    field: str
    operator: str
    v: int

    def passes(self, part: Part) -> bool:
        if self.operator == '>':
            return getattr(part,self.field) > self.v
        if self.operator == '<':
            return getattr(part,self.field) < self.v
        raise Exception("Shoudn't get here")
        
class Rule(BaseModel):
    filter: Filter | None = None
    destination: str

    def apply(self, part: Part) -> bool:
        if not self.filter:
            return True

        return self.filter.passes(part)

class Workflow(BaseModel):
    name: str
    rules: list[Rule]

def process_workflows(part: Part, workflows: dict[str,Workflow]) -> bool:
    workflow = "in"

    while True:
        for rule in workflows[workflow].rules:
            if rule.apply(part):
                if rule.destination == "A":
                    return True
                if rule.destination == "R":
                    return False
                if workflow == rule.destination:
                    raise Exception("Loop in process_workflow")
                workflow = rule.destination
                break
        

def load(path: str) -> tuple[list[Part], dict[str,Workflow]]:
    parts = []
    workflows = {}

    for line in open(path).read().split("\n"):
        if line.strip():
            m = re.match(r"^{x=(\d+),m=(\d+),a=(\d+),s=(\d+)}$",line.strip())
            if m:
                parts.append(Part(x=int(m.group(1)),m=int(m.group(2)),a=int(m.group(3)),s=int(m.group(4))))
            else:
                m = re.match(r"^(\w+){(.+)}$",line.strip())
                if m:
                    workflow = Workflow(name=m.group(1),rules=[])
                    workflow_parts = m.group(2).split(",")

                    for rule_s in workflow_parts[0:-1]:
                        m = re.match(r"^(\w+)([<>])(\d+):(\w+)$", rule_s)
                        if not m:
                            raise Exception("Unparseable workflow")
                        workflow.rules.append(Rule(destination=m.group(4),filter=Filter(field=m.group(1), operator=m.group(2),v=int(m.group(3)))))

                    workflow.rules.append(Rule(destination=workflow_parts[-1]))
                    workflows[workflow.name] = workflow
                else:
                    raise Exception(f"Unhandled line {line}")
        
    return parts, workflows


class Node(BaseModel):
    workflow: str
    edges: list["Node"]

from queue import Queue

def make_graph(workflows: dict[str, Workflow], start: str) -> Node:
    n = Node(workflow=start, edges=[])

    frontier = Queue()
    frontier.put(start)
    came_from = dict()
    came_from[start] = None
    
    while not frontier.empty():
        current = frontier.get()
        for rule in workflows[current].rules:
            if rule.destination not in came_from:
                came_from[rule.destination] = current
                if rule.destination not in ("A","R"):
                    frontier.put(rule.destination)


    start = "A"
    while came_from[start] != "in":
        print(f"{start} -> {came_from[start]}")
        start = came_from[start]
    print(f"{start} -> in")
    return 0,0
    
def star_1(path: str) -> int:
  accepted = 0
  with open(path,'r') as f:
      parts, workflows = load(path)
      for p in parts:
          if process_workflows(p,workflows):
              accepted += p.rating()

  return accepted

def star_2(path: str) -> int:
  accepted = 0
  with open(path,'r') as f:
      parts, workflows = load(path)
      make_graph(workflows,"in")
      """ 
      x = max([v for f,v in max_v if f == "x"]) - min([v for f,v in min_v if f == "x"])
      m = max([v for f,v in max_v if f == "m"]) - min([v for f,v in min_v if f == "m"])
      a = max([v for f,v in max_v if f == "a"]) - min([v for f,v in min_v if f == "a"])
      s = max([v for f,v in max_v if f == "s"]) - min([v for f,v in min_v if f == "s"])
      print(x,m,a,s)
      print(x * m * a * s)
      """
  return 0
  
#print("Star 1:",star_1("input.txt"))
print("Star 2:",star_2("sample.txt"))

#+END_SRC

#+RESULTS:
: A -> px
: px -> in
: Star 2: 0
*** 

