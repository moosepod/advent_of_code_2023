
* AOC 2023 Day 18

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 18 star 1
*** Problem statement
*** Solution
#+BEGIN_SRC python :results output
import re
from d18_utils import Grid,S,dump_grid,P, dump_grid_s, UP, DOWN, LEFT, RIGHT

DIRECTIONS = {"R": RIGHT, "L": LEFT, "U": UP, "D": DOWN}

def draw_line(grid: Grid, p: P, direction: str, distance: int) -> P:
    p = P(x=p.x, y=p.y)
    for i in range(0,distance):
        p += DIRECTIONS[direction]
        grid.min_p.x = min(grid.min_p.x, p.x)
        grid.min_p.y = min(grid.min_p.y, p.y)
        if p.x >= grid.size.width:
            grid.size.width+=1
        if p.y >= grid.size.height:
            grid.size.height+=1

        grid.cells[p] = "#"

    return p

def star_1(path: str) -> int:
  p = P()
  volume = 0
  grid = Grid(min_p=P(), cells={p:"#"}, size=S(width=1,height=1))
  with open(path,'r') as f:
    for idx,line in enumerate(f.read().split("\n")):
      if line.strip():
        m = re.search("^([RDLU]) (\d+) \((#[a-z0-9]{6})\)",line)
        direction, distance, color = m.groups()
        p = draw_line(grid, p, direction, int(distance))

    grid.flood_fill("+",[P(x=1,y=1)])
    with open("input_grid_filled.txt","w") as f:
        f.write(dump_grid_s(grid))
    #dump_grid(grid)
  return len(grid.cells)
  
print("Star 1:",star_1("input.txt"))

#+END_SRC

#+RESULTS:
: Star 1: 67891

#+begin_example
Too low
: Star 1: 12613
#+end_example

#+begin_example
 0123456
0#######
1#.....#
2###...#
3..#...#
4..#...#
5###.###
6#...#..
7##..###
8.#....#
9.######

Star 1: 50
#+end_example


** Day 18 star 2
*** Problem statement
*** Solution
#+BEGIN_SRC python :results output
def star_2(path: str) -> int:
  with open(path,'r') as f:
     pass
  return 0
  
print("Star 2:", star_2("sample.txt"))
#+END_SRC

