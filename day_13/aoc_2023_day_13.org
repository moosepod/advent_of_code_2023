
* AOC 2023 Day 13

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 13 star 1
*** Notes
- Refers to "each" line of reflection, assume a puzzle can have multiple but each line can only have one

- #.##..##.
- ..#.##.#.
- ##......#
- ##......#
- ..#.##.#.
- ..##..##.
- #.#.##.#.

    123456789
- 1 #...##..# 1
- 2 #....#..# 2
- 3 ..##..### 3
- 4v#####.##.v4
- 5^#####.##.^5
- 6 ..##..### 6
- 7 #....#..# 7

Sample 3 has one where I'm finding no matches


*** Solution
#+BEGIN_SRC python :results output
import re
from d13_utils import load_grid_from_str, dump_grid, Grid,P

def check_column(grid: Grid, c: int) -> int:
    w = 0
    while c-w >= 0 and c+w+1 < grid.size.width:
        for r in range(0,grid.size.height):
            if grid.cells[P(x=c-w,y=r)] != grid.cells[P(x=c+w+1,y=r)]:
                return 0
        w+=1
        
    return w+1

def check_row(grid: Grid, r: int) -> int:
    h = 0
    while r-h >= 0 and r+h+1 < grid.size.height:
        for c in range(0,grid.size.width):
            if grid.cells[P(x=c,y=r-h)] != grid.cells[P(x=c,y=r+h+1)]:
                return 0
        h+=1
        
    return h+1

    
def find_vertical(grid: Grid) -> list[int]:
    longest = 0
    columns = []
    for c in range(0,grid.size.width-1):
        if check_column(grid,c):
            columns.append(c+1)
        else:
            columns.append(0)
            
    #print(columns)
    return columns

def find_horizontal(grid: Grid) -> list[int]:
    longest = 0
    rows = []
    for r in range(0,grid.size.height-1):
        if check_row(grid,r):
            rows.append(r+1)
        else:
            rows.append(0)
                
    #print(rows)
    return rows

def star_1(path: str) -> int:
  total = 0
  with open(path,'r') as f:
    grids = [load_grid_from_str(s) for s in f.read().split("\n\n") if len(s.strip())]

    for idx,grid in enumerate(grids):
        #dump_grid(grid)
        old_total = total
        va = find_vertical(grid)
        ha = find_horizontal(grid)
        v = max(va)
        h = max(ha)
        total += v
        total += h * 100
        #print(idx,v,h,total)
        if total == old_total:
            print('Nothing found for',idx)
        if len([x for x in va if x]) > 1:
            print(idx,'v')
        if len([x for x in ha if x]) > 1:
            print(idx,'h')
  
  return total
  
#print("Star 1:",star_1("input.txt"))

def flip_point(grid: Grid, p: P):
    if grid.cells[p] == '.':
        grid.cells[p] = '#'
    else:
        grid.cells[p] = '.'

def unsmudge(grid: Grid, v: int, h: int):
    for x in range(0,grid.size.width):
        for y in range(0, grid.size.height):
            flip_point(grid,P(x=x,y=y))

            # need to fix this logic

            va = [x for x in find_vertical(grid) if x != v]
            ha = [x for x in find_horizontal(grid) if x != h]
            nv = va[0] if len(va) else 0
            nh = ha[0] if len(ha) else 0
                
            flip_point(grid,P(x=x,y=y))

            if (nv,nh) != (v,h):
                return nv,nh

    return v,h
    
def star_2(path: str) -> int:
  total = 0
  with open(path,'r') as f:
    grids = [load_grid_from_str(s) for s in f.read().split("\n\n") if len(s.strip())]

    for idx,grid in enumerate(grids):
        #dump_grid(grid)
        old_total = total

        v = max(find_vertical(grid))
        h = max(find_horizontal(grid))

        v, h = unsmudge(grid, v, h)
        print(v,h)
        
        total += v
        total += h * 100

        if total == old_total:
            print('Nothing found for',idx)
  
  return total

print("Star 2:",star_2("sample.txt"))
#+END_SRC

#+RESULTS:
: 0 3
: 0 0
: Nothing found for 1
: Star 2: 300

** Too high
: Star 2: 60169


