
* AOC 2023 Day 13

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 13 star 1
*** Notes
- Refers to "each" line of reflection, assume a puzzle can have multiple but each line can only have one

- #.##..##.
- ..#.##.#.
- ##......#
- ##......#
- ..#.##.#.
- ..##..##.
- #.#.##.#.

    123456789
- 1 #...##..# 1
- 2 #....#..# 2
- 3 ..##..### 3
- 4v#####.##.v4
- 5^#####.##.^5
- 6 ..##..### 6
- 7 #....#..# 7
  
*** Solution
#+BEGIN_SRC python :results output
import re
from d13_utils import load_grid_from_str, dump_grid

def check_reflection_line(s: str, c: int, w: int) -> bool:
    for i in range(1,w+1):
        if s[c-i] != s[c+i-1]:
            return False

    return True

def check_reflections(lines: list[str], c: int, w: int) -> bool:
    for line in lines:
        if not check_reflection_line(line,c,w):
            return False

    return True
        
def find_reflections(lines: list[str]) -> list[int]:
    r = []
    d = 2
    max_w = 0

    width = len(lines[0])
    
    for c in range(1,width-1):
        if c > (width/2) - 1:
            d = -1
        max_w+=d
        for w in range(1, max_w):
            if check_reflections(lines, c,w):
                r.append((c,w))

    return r
            
def star_1(path: str) -> int:
  with open(path,'r') as f:
    for idx, l in enumerate(f.read().split("\n\n")):
      l = l.strip()
      if l:
        print(f"Grid {idx+1}")        
        print(find_reflections(l.split("\n")))
        
  return 0
  
print("Star 1:",star_1("sample.txt"))

#+END_SRC

#+RESULTS:
: Grid 1
: [(5, 1), (5, 2), (5, 3)]
: Grid 2
: [(3, 1), (7, 1)]
: Star 1: 0

** Day 13 star 2
*** Problem statement
*** Solution
#+BEGIN_SRC python :results output
def star_2(path: str) -> int:
  with open(path,'r') as f:
     pass
  return 0
  
print("Star 2:", star_2("sample.txt"))
#+END_SRC

#+RESULTS:
: Star 2: 0

