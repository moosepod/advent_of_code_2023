
* AOC 2023 Day 3

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Puzzle

The engineer explains that an engine part seems to be missing from the
engine, but nobody can figure out which one. If you can add up all the
part numbers in the engine schematic, it should be easy to work out
which part is missing.

The engine schematic (your puzzle input) consists of a visual
representation of the engine. There are lots of numbers and symbols
you don't really understand, but apparently any number adjacent to a
symbol, even diagonally, is a "part number" and should be included in
your sum. (Periods (.) do not count as a symbol.)

Here is an example engine schematic:

467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..

In this schematic, two numbers are not part numbers because they are
not adjacent to a symbol: 114 (top right) and 58 (middle right). Every
other number is adjacent to a symbol and so is a part number; their
sum is 4361.

** Load and validate data
#+BEGIN_SRC python :session session_day_3 :results output
from pydantic import BaseModel
try:
  class Grid(BaseModel):
    cells: dict[tuple, str]
    width: int = 0
    height: int = 0

    def set_cell(self, x: int, y: int, v: int):
      self.cells[(x,y)] = v
      if x > self.width:
        self.width = x+1
      if y > self.height:
        self.height = y+1

    def get_cell(self,x:int,y:int)->str:
      return self.cells.get((x,y)) or '.'

    def adjascent_to_symbol(self, x: int, y: int) -> bool:
      for dx,dy in ((-1,-1),(0,-1),(1,-1),(-1,0),(1,0),(-1,1),(0,1),(1,1),):
        c = self.get_cell(x+dx, y+dy)
        if not c.isdigit() and not c == '.':
          return True
      return False

    def as_text(self):
      s = ""
      for y in range(0,self.height):
        line = ""
        for x in range(0,self.width):
          line += self.get_cell(x,y)
        s += f"{line}\n"
      return s

  def load_grid(path: str) -> Grid:
    grid = Grid(cells={})
    with open(path) as f:
      for y, row in enumerate(f.read().split()):
        row = row.strip()
        for x, c in enumerate(row):
          grid.set_cell(x,y,c)

    return grid

  grid = load_grid("input.txt")
  # Uncomment to show whole grid
  #print(grid.as_text())
except Exception as e:
  print("Error:",e)
#+END_SRC

#+RESULTS:


** Day 3 star 1
*** Problem statement

Of course, the actual engine schematic is much larger. What is the sum
of all of the part numbers in the engine schematic?

*** Solution
#+BEGIN_SRC python :session session_day_3 :results output
try:
  def star_1(grid: Grid) -> int:
    s = 0
    n = -1
    a = False
    for y in range(0,grid.height):
      if n != -1:
        if a:
          s+=n
        n=-1
      a = False
      for x in range(0,grid.width):
        c = grid.get_cell(x,y)
        if not c.isdigit():
          if n != -1:
            if a:
              s+=n
            n = -1
            a = False
        else:
          if grid.adjascent_to_symbol(x,y):
            a = True
          if n == -1:
            n = 0
          n*=10
          n+=int(c)

    if n != -1:
      if a:
        s+=n
    return s
  
  print(star_1(grid))
except Exception as e:
  print("Error:",e)
#+END_SRC

#+RESULTS:
: 540212

** Day 3 star 2
*** Problem statement
*** Solution
#+BEGIN_SRC python :session session_day_3 :results output
try:
  def star_2(grid: Grid) -> int:
      return 0
  
  print(star_2(grid))
except Exception as e:
  print("Error:",e)
#+END_SRC

