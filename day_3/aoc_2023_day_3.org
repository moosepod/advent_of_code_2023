
* AOC 2023 Day 3

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Puzzle

The engineer explains that an engine part seems to be missing from the
engine, but nobody can figure out which one. If you can add up all the
part numbers in the engine schematic, it should be easy to work out
which part is missing.

The engine schematic (your puzzle input) consists of a visual
representation of the engine. There are lots of numbers and symbols
you don't really understand, but apparently any number adjacent to a
symbol, even diagonally, is a "part number" and should be included in
your sum. (Periods (.) do not count as a symbol.)

Here is an example engine schematic:

467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..

In this schematic, two numbers are not part numbers because they are
not adjacent to a symbol: 114 (top right) and 58 (middle right). Every
other number is adjacent to a symbol and so is a part number; their
sum is 4361.

** Load and validate data
#+BEGIN_SRC python :session session_day_3 :results output
from pydantic import BaseModel
try:
  DIRECTIONS = ((-1,-1),(0,-1),(1,-1),(-1,0),(1,0),(-1,1),(0,1),(1,1),)
  class Grid(BaseModel):
    cells: dict[tuple, str]
    width: int = 0
    height: int = 0

    def set_cell(self, x: int, y: int, v: int):
      self.cells[(x,y)] = v
      if x > self.width:
        self.width = x+1
      if y > self.height:
        self.height = y+1

    def get_cell(self,x:int,y:int)->str:
      return self.cells.get((x,y)) or '.'

    def adjascent_to_symbol(self, x: int, y: int) -> bool:
      for dx,dy in DIRECTIONS:
        c = self.get_cell(x+dx, y+dy)
        if not c.isdigit() and not c == '.':
          return True
      return False

    def adjascent_cells_with_digits(self, x: int, y: int) -> list[tuple[int,int]]:
      r = []
      for dx,dy in DIRECTIONS:
        c = self.get_cell(x+dx, y+dy)
        if c.isdigit():
          r.append(((x+dx),(y+dy)))
      return r

    def as_text(self):
      s = ""
      for y in range(0,self.height):
        line = ""
        for x in range(0,self.width):
          line += self.get_cell(x,y)
        s += f"{line}\n"
      return s

  def load_grid(path: str) -> Grid:
    grid = Grid(cells={})
    with open(path) as f:
      for y, row in enumerate(f.read().split()):
        row = row.strip()
        for x, c in enumerate(row):
          grid.set_cell(x,y,c)

    return grid

  grid = load_grid("input.txt")
  # Uncomment to show whole grid
  #print(grid.as_text())
  print(f"Grid is {grid.width}x{grid.height}")
except Exception as e:
  print("Error:",e)
#+END_SRC

#+RESULTS:
: Grid is 140x140


** Day 3 star 1
*** Problem statement

Of course, the actual engine schematic is much larger. What is the sum
of all of the part numbers in the engine schematic?

*** Solution
#+BEGIN_SRC python :session session_day_3 :results output
try:
  class PartNumber(BaseModel):
    n: int
    x: int
    y: int
    l: int
    a: bool

    def in_cell(self, x: int, y: int):
      return y == self.y and x >= self.x and x < self.x + self.l
    
  def extract_part_numbers(grid: Grid) -> list[PartNumber]:
    part_numbers: list[PartNumber] = []
    pn: PartNumber | None = None
    for y in range(0,grid.height):
      for x in range(0,grid.width):
        c = grid.get_cell(x,y)

        if c.isdigit():
            if not pn:
              pn = PartNumber(n=0,x=x,y=y,a=False,l=0)
              part_numbers.append(pn)
            pn.n *= 10
            pn.n += int(c)
            pn.l += 1
            if grid.adjascent_to_symbol(x,y):
              pn.a = True
        else:
          if pn:
            pn = None

    return part_numbers

  def star_1(grid: Grid) -> int:
    return sum([pn.n for pn in extract_part_numbers(grid) if pn.a])

  
  print(star_1(grid))
except Exception as e:
  print("Error:",e)
#+END_SRC

#+RESULTS:

** Day 3 star 2
*** Problem statement
The missing part wasn't the only issue - one of the gears in the
engine is wrong. A gear is any * symbol that is adjacent to exactly
two part numbers. Its gear ratio is the result of multiplying those
two numbers together.

This time, you need to find the gear ratio of every gear and add them
all up so that the engineer can figure out which gear needs to be
replaced.

Consider the same engine schematic again:

467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..

In this schematic, there are two gears. The first is in the top left;
it has part numbers 467 and 35, so its gear ratio is 16345. The second
gear is in the lower right; its gear ratio is 451490. (The * adjacent
to 617 is not a gear because it is only adjacent to one part number.)
Adding up all of the gear ratios produces 467835.

*** Solution
#+BEGIN_SRC python :session session_day_3 :results output
try:
  from math import prod
  def star_2(grid: Grid) -> int:
    part_numbers = extract_part_numbers(grid)
    gear_ratios = []
    for y in range(0,grid.height):
      for x in range(0,grid.width):
        if grid.get_cell(x,y) == '*':
          digit_cells = grid.adjascent_cells_with_digits(x,y)
          matching_numbers = {}
          for cell in digit_cells:
            for part_number in part_numbers:
              if part_number.in_cell(*cell):
                matching_numbers[(part_number.n,part_number.x,part_number.y)] = part_number
                break
                
          if len(matching_numbers) == 2:
            ratio = prod([x[0] for x in matching_numbers.keys()])
            gear_ratios.append(ratio)

    return sum(gear_ratios)
  
  print(star_2(grid))
except Exception as e:
  print("Error:",e)
#+END_SRC

#+RESULTS:


