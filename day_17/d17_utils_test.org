** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Testing breadth first search

#+BEGIN_SRC python :results output
from d17_utils import PriorityQueue

q = PriorityQueue()
q.put("a",3)
q.put("b",2)
q.put("c",1)

print(q.get_with_priority())
print(q.get_with_priority())
print(q.get_with_priority())


#+END_SRC

#+RESULTS:
: (1, 'c')
: (2, 'b')
: (3, 'a')

#+BEGIN_SRC python :results output
import re
from pydantic import BaseModel
from d17_utils import Grid, load_grid, dump_grid, P, load_grid_from_str, manhattan_distance, d_to_c

def find_path(s: str, debug=True) -> list[P]:
    g = load_grid_from_str(s)
    g.blocked = [1]
    start = g.find_first_value(2)
    end = g.find_first_value(3)

    if debug:
        print()
        print(f'Find path from {start} to {end}')

    paths = g.dijkstra_k_shortest_paths(start,end, 5) or [[]]
    #paths = [g.dijkstra_pathfind(start,end)]
    #for idx,path in enumerate(paths):
    #    print(idx,path)

    path = {p: "x" for p in paths[0]}
    path[start] = "S"
    dump_grid(g,path)
    
    #return(path)
    return []

print(find_path("""
11111
10201
10003
11111
"""))

# Clear
print(find_path("""
11111111
10000001
10020001
10000003
10000001
11111111
"""))

# Almost blocked
print(find_path("""
11111111
10001001
10021001
10001003
10000001
11111111
"""))

# Maze!
print(find_path("""
11111111
10001001
10121011
10111003
10000011
11111111
"""))

# Check bounds
print(find_path("""
00000000
00001000
00121010
00111003
00000010
00000000
"""))

# Blocked
print(find_path("""
11111111
10001001
10021001
10001003
10001001
11111111
"""))

# Weights
print(find_path("""
99999999
90445009
90429009
90600603
90075009
99999999
"""))

print(find_path("""
00000000
01456410
01256410
01456410
01456413
01456410
00000000
"""))

#+END_SRC

#+RESULTS:
#+begin_example

Find path from x=2 y=1 to x=4 y=2
11111
10Sx1
100xx
11111

[]

Find path from x=3 y=2 to x=7 y=3
11111111
10000001
100S0001
100xxxxx
10000001
11111111

[]

Find path from x=3 y=2 to x=7 y=3
11111111
10001001
100S1001
100x1xxx
100xxx01
11111111

[]

Find path from x=3 y=2 to x=7 y=3
11111111
1xxx1001
1x1S1011
1x111xxx
1xxxxx11
11111111

[]

Find path from x=3 y=2 to x=7 y=3
000xxx00
000x1x00
001S1x10
00111xxx
00000010
00000000

[]

Find path from x=3 y=2 to x=7 y=3
11111111
10001001
100S1001
10001003
10001001
11111111

[]

Find path from x=3 y=2 to x=7 y=3
99999999
90445009
904S9009
906xxxxx
90075009
99999999

[]

Find path from x=2 y=2 to x=7 y=4
00xxxxxx
01x5641x
01S5641x
0145641x
0145641x
01456410
00000000

[]
#+end_example

** Testing Dijkstra
  
#+BEGIN_SRC python :results output
import re
from pydantic import BaseModel
from d17_utils import Grid, load_grid, dump_grid, P, load_grid_from_str, manhattan_distance

def find_path(s: str, debug=True) -> list[P]:
    g = load_grid_from_str(s)
    g.blocked = [1]
    start = g.find_first_value(2)
    end = g.find_first_value(3)
    g.cells[end] = 0
    g.cells[start] = 0

    if debug:
        print(f'Find path from {start} to {end}')

    path = g.a_star_with_max_straight(start,end,manhattan_distance,max_straight=2)
    for p in path:
        if p:
            g.cells[p] = "x"

    dump_grid(g,{})
    return(path)

# Clear
print(find_path("""
11111111
10000001
10020001
10000003
10000001
11111111
"""))

# Almost blocked
print(find_path("""
11111111
10001001
10021001
10001003
10000001
11111111
"""))

# Maze!
print(find_path("""
11111111
10001001
10121011
10111003
10000011
11111111
"""))

# Check bounds
print(find_path("""
00000000
00001000
00121010
00111003
00000010
00000000
"""))

# Blocked
print(find_path("""
11111111
10001001
10021001
10001003
10001001
11111111
"""))

# Weights
print(find_path("""
99999999
90445009
90429009
90600603
90075009
99999999
"""))

print(find_path("""
00000000
01456410
01256410
01456410
01456413
01456410
00000000
"""))


#+END_SRC

#+RESULTS:
#+begin_example
Find path from x=3 y=2 to x=7 y=3
11111111
10000001
10000001
10000000
10000001
11111111

[(P(x=6, y=3), P(x=1, y=0)), (P(x=5, y=3), P(x=1, y=0)), (P(x=5, y=2), P(x=0, y=1)), (P(x=4, y=2), P(x=1, y=0)), (P(x=4, y=3), P(x=0, y=-1)), (P(x=3, y=3), P(x=1, y=0)), (P(x=3, y=2), P(x=0, y=1)), (None, None)]
Find path from x=3 y=2 to x=7 y=3
11111111
10001001
10001001
10001000
10000001
11111111

[(P(x=6, y=3), P(x=1, y=0)), (P(x=5, y=3), P(x=1, y=0)), (P(x=5, y=4), P(x=0, y=-1)), (P(x=4, y=4), P(x=1, y=0)), (P(x=3, y=4), P(x=1, y=0)), (P(x=2, y=4), P(x=1, y=0)), (P(x=2, y=3), P(x=0, y=1)), (P(x=3, y=3), P(x=-1, y=0)), (P(x=3, y=2), P(x=0, y=1)), (None, None)]
Find path from x=3 y=2 to x=7 y=3
11111111
10001001
10101011
10111000
10000011
11111111

[(P(x=6, y=3), P(x=1, y=0)), (P(x=5, y=3), P(x=1, y=0)), (P(x=5, y=4), P(x=0, y=-1)), (P(x=4, y=4), P(x=1, y=0)), (P(x=3, y=4), P(x=1, y=0)), (P(x=2, y=4), P(x=1, y=0)), (P(x=1, y=4), P(x=1, y=0)), (P(x=1, y=3), P(x=0, y=1)), (P(x=1, y=2), P(x=0, y=1)), (P(x=1, y=1), P(x=0, y=1)), (P(x=2, y=1), P(x=-1, y=0)), (P(x=3, y=1), P(x=-1, y=0)), (P(x=3, y=2), P(x=0, y=-1)), (None, None)]
Find path from x=3 y=2 to x=7 y=3
00000000
00001000
00101010
00111000
00000010
00000000

[(P(x=6, y=3), P(x=1, y=0)), (P(x=5, y=3), P(x=1, y=0)), (P(x=5, y=4), P(x=0, y=-1)), (P(x=4, y=4), P(x=1, y=0)), (P(x=4, y=5), P(x=0, y=-1)), (P(x=3, y=5), P(x=1, y=0)), (P(x=3, y=4), P(x=0, y=1)), (P(x=2, y=4), P(x=1, y=0)), (P(x=2, y=5), P(x=0, y=-1)), (P(x=1, y=5), P(x=1, y=0)), (P(x=1, y=4), P(x=0, y=1)), (P(x=0, y=4), P(x=1, y=0)), (P(x=0, y=3), P(x=0, y=1)), (P(x=1, y=3), P(x=-1, y=0)), (P(x=1, y=2), P(x=0, y=1)), (P(x=0, y=2), P(x=1, y=0)), (P(x=0, y=1), P(x=0, y=1)), (P(x=1, y=1), P(x=-1, y=0)), (P(x=1, y=0), P(x=0, y=1)), (P(x=2, y=0), P(x=-1, y=0)), (P(x=2, y=1), P(x=0, y=-1)), (P(x=3, y=1), P(x=-1, y=0)), (P(x=3, y=2), P(x=0, y=-1)), (None, None)]
Find path from x=3 y=2 to x=7 y=3
11111111
10001001
10001001
10001000
10001001
11111111

[]
Find path from x=3 y=2 to x=7 y=3
99999999
90445009
90409009
90600600
90075009
99999999

[(P(x=6, y=3), P(x=1, y=0)), (P(x=5, y=3), P(x=1, y=0)), (P(x=5, y=4), P(x=0, y=-1)), (P(x=4, y=4), P(x=1, y=0)), (P(x=4, y=3), P(x=0, y=1)), (P(x=3, y=3), P(x=1, y=0)), (P(x=3, y=2), P(x=0, y=1)), (None, None)]
Find path from x=2 y=2 to x=7 y=4
00000000
01456410
01056410
01456410
01456410
01456410
00000000

[(P(x=7, y=5), P(x=0, y=-1)), (P(x=7, y=6), P(x=0, y=-1)), (P(x=6, y=6), P(x=1, y=0)), (P(x=5, y=6), P(x=1, y=0)), (P(x=5, y=5), P(x=0, y=1)), (P(x=4, y=5), P(x=1, y=0)), (P(x=4, y=4), P(x=0, y=1)), (P(x=3, y=4), P(x=1, y=0)), (P(x=3, y=3), P(x=0, y=1)), (P(x=2, y=3), P(x=1, y=0)), (P(x=2, y=2), P(x=0, y=1)), (None, None)]
#+end_example
