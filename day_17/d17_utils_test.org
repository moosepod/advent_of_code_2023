** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Testing breadth first search
  
#+BEGIN_SRC python :results output
import re
from pydantic import BaseModel
from d17_utils import Grid, load_grid, dump_grid, P, load_grid_from_str, manhattan_distance, d_to_c

def find_path(s: str, debug=True) -> list[P]:
    g = load_grid_from_str(s)
    g.blocked = [1]
    start = g.find_first_value(2)
    end = g.find_first_value(3)

    if debug:
        print()
        print(f'Find path from {start} to {end}')

    path = {p: d_to_c(d) for p,d in g.a_star_with_max_straight(start,end, heuristic=manhattan_distance,max_straight=1)}
    path[start] = "S"
    dump_grid(g,path)
    
    return(path)

# Clear
print(find_path("""
11111111
10000001
10020001
10000003
10000001
11111111
"""))

# Almost blocked
print(find_path("""
11111111
10001001
10021001
10001003
10000001
11111111
"""))

# Maze!
print(find_path("""
11111111
10001001
10121011
10111003
10000011
11111111
"""))

# Check bounds
print(find_path("""
00000000
00001000
00121010
00111003
00000010
00000000
"""))

# Blocked
print(find_path("""
11111111
10001001
10021001
10001003
10001001
11111111
"""))

# Weights
print(find_path("""
99999999
90445009
90429009
90600603
90075009
99999999
"""))

print(find_path("""
00000000
01456410
01256410
01456410
01456413
01456410
00000000
"""))

#+END_SRC

#+RESULTS:
#+begin_example

Find path from x=3 y=2 to x=7 y=3
11111111
10000001
100Sv>v1
1000>^>3
10000001
11111111

{P(x=6, y=3): '>', P(x=6, y=2): 'v', P(x=5, y=2): '>', P(x=5, y=3): '^', P(x=4, y=3): '>', P(x=4, y=2): 'v', P(x=3, y=2): 'S', None: 'x'}

Find path from x=3 y=2 to x=7 y=3
11111111
10001001
100S1001
10v<1>>3
10>>>^01
11111111

{P(x=6, y=3): '>', P(x=5, y=3): '>', P(x=5, y=4): '^', P(x=4, y=4): '>', P(x=3, y=4): '>', P(x=2, y=4): '>', P(x=2, y=3): 'v', P(x=3, y=3): '<', P(x=3, y=2): 'S', None: 'x'}

Find path from x=3 y=2 to x=7 y=3
11111111
1v<<1001
1v1S1011
1v111>>3
1>>>>^11
11111111

{P(x=6, y=3): '>', P(x=5, y=3): '>', P(x=5, y=4): '^', P(x=4, y=4): '>', P(x=3, y=4): '>', P(x=2, y=4): '>', P(x=1, y=4): '>', P(x=1, y=3): 'v', P(x=1, y=2): 'v', P(x=1, y=1): 'v', P(x=2, y=1): '<', P(x=3, y=1): '<', P(x=3, y=2): 'S', None: 'x'}

Find path from x=3 y=2 to x=7 y=3
0v<00000
v<^<1000
>v1S1010
v<111>>3
>v>v>^10
0>^>^000

{P(x=6, y=3): '>', P(x=5, y=3): '>', P(x=5, y=4): '^', P(x=4, y=4): '>', P(x=4, y=5): '^', P(x=3, y=5): '>', P(x=3, y=4): 'v', P(x=2, y=4): '>', P(x=2, y=5): '^', P(x=1, y=5): '>', P(x=1, y=4): 'v', P(x=0, y=4): '>', P(x=0, y=3): 'v', P(x=1, y=3): '<', P(x=1, y=2): 'v', P(x=0, y=2): '>', P(x=0, y=1): 'v', P(x=1, y=1): '<', P(x=1, y=0): 'v', P(x=2, y=0): '<', P(x=2, y=1): '^', P(x=3, y=1): '<', P(x=3, y=2): 'S', None: 'x'}

Find path from x=3 y=2 to x=7 y=3
11111111
10001001
100S1001
10001003
10001001
11111111

{P(x=3, y=2): 'S'}

Find path from x=3 y=2 to x=7 y=3
99999999
90445009
904S9009
906>v>>3
9007>^09
99999999

{P(x=6, y=3): '>', P(x=5, y=3): '>', P(x=5, y=4): '^', P(x=4, y=4): '>', P(x=4, y=3): 'v', P(x=3, y=3): '>', P(x=3, y=2): 'S', None: 'x'}

Find path from x=2 y=2 to x=7 y=4
00000000
01456410
01S56410
01>v6410
014>v413
0145>v1^
00000>>^

{P(x=7, y=5): '^', P(x=7, y=6): '^', P(x=6, y=6): '>', P(x=5, y=6): '>', P(x=5, y=5): 'v', P(x=4, y=5): '>', P(x=4, y=4): 'v', P(x=3, y=4): '>', P(x=3, y=3): 'v', P(x=2, y=3): '>', P(x=2, y=2): 'S', None: 'x'}
#+end_example

** Testing Dijkstra
  
#+BEGIN_SRC python :results output
import re
from pydantic import BaseModel
from d17_utils import Grid, load_grid, dump_grid, P, load_grid_from_str, manhattan_distance

def find_path(s: str, debug=True) -> list[P]:
    g = load_grid_from_str(s)
    g.blocked = [1]
    start = g.find_first_value(2)
    end = g.find_first_value(3)
    g.cells[end] = 0
    g.cells[start] = 0

    if debug:
        print(f'Find path from {start} to {end}')

    path = g.a_star_with_max_straight(start,end,manhattan_distance,max_straight=2)
    for p in path:
        if p:
            g.cells[p] = "x"

    dump_grid(g,{})
    return(path)

# Clear
print(find_path("""
11111111
10000001
10020001
10000003
10000001
11111111
"""))

# Almost blocked
print(find_path("""
11111111
10001001
10021001
10001003
10000001
11111111
"""))

# Maze!
print(find_path("""
11111111
10001001
10121011
10111003
10000011
11111111
"""))

# Check bounds
print(find_path("""
00000000
00001000
00121010
00111003
00000010
00000000
"""))

# Blocked
print(find_path("""
11111111
10001001
10021001
10001003
10001001
11111111
"""))

# Weights
print(find_path("""
99999999
90445009
90429009
90600603
90075009
99999999
"""))

print(find_path("""
00000000
01456410
01256410
01456410
01456413
01456410
00000000
"""))


#+END_SRC

#+RESULTS:
#+begin_example
Find path from x=3 y=2 to x=7 y=3
11111111
10000001
10000001
10000000
10000001
11111111

[(P(x=6, y=3), P(x=1, y=0)), (P(x=5, y=3), P(x=1, y=0)), (P(x=5, y=2), P(x=0, y=1)), (P(x=4, y=2), P(x=1, y=0)), (P(x=4, y=3), P(x=0, y=-1)), (P(x=3, y=3), P(x=1, y=0)), (P(x=3, y=2), P(x=0, y=1)), (None, None)]
Find path from x=3 y=2 to x=7 y=3
11111111
10001001
10001001
10001000
10000001
11111111

[(P(x=6, y=3), P(x=1, y=0)), (P(x=5, y=3), P(x=1, y=0)), (P(x=5, y=4), P(x=0, y=-1)), (P(x=4, y=4), P(x=1, y=0)), (P(x=3, y=4), P(x=1, y=0)), (P(x=2, y=4), P(x=1, y=0)), (P(x=2, y=3), P(x=0, y=1)), (P(x=3, y=3), P(x=-1, y=0)), (P(x=3, y=2), P(x=0, y=1)), (None, None)]
Find path from x=3 y=2 to x=7 y=3
11111111
10001001
10101011
10111000
10000011
11111111

[(P(x=6, y=3), P(x=1, y=0)), (P(x=5, y=3), P(x=1, y=0)), (P(x=5, y=4), P(x=0, y=-1)), (P(x=4, y=4), P(x=1, y=0)), (P(x=3, y=4), P(x=1, y=0)), (P(x=2, y=4), P(x=1, y=0)), (P(x=1, y=4), P(x=1, y=0)), (P(x=1, y=3), P(x=0, y=1)), (P(x=1, y=2), P(x=0, y=1)), (P(x=1, y=1), P(x=0, y=1)), (P(x=2, y=1), P(x=-1, y=0)), (P(x=3, y=1), P(x=-1, y=0)), (P(x=3, y=2), P(x=0, y=-1)), (None, None)]
Find path from x=3 y=2 to x=7 y=3
00000000
00001000
00101010
00111000
00000010
00000000

[(P(x=6, y=3), P(x=1, y=0)), (P(x=5, y=3), P(x=1, y=0)), (P(x=5, y=4), P(x=0, y=-1)), (P(x=4, y=4), P(x=1, y=0)), (P(x=4, y=5), P(x=0, y=-1)), (P(x=3, y=5), P(x=1, y=0)), (P(x=3, y=4), P(x=0, y=1)), (P(x=2, y=4), P(x=1, y=0)), (P(x=2, y=5), P(x=0, y=-1)), (P(x=1, y=5), P(x=1, y=0)), (P(x=1, y=4), P(x=0, y=1)), (P(x=0, y=4), P(x=1, y=0)), (P(x=0, y=3), P(x=0, y=1)), (P(x=1, y=3), P(x=-1, y=0)), (P(x=1, y=2), P(x=0, y=1)), (P(x=0, y=2), P(x=1, y=0)), (P(x=0, y=1), P(x=0, y=1)), (P(x=1, y=1), P(x=-1, y=0)), (P(x=1, y=0), P(x=0, y=1)), (P(x=2, y=0), P(x=-1, y=0)), (P(x=2, y=1), P(x=0, y=-1)), (P(x=3, y=1), P(x=-1, y=0)), (P(x=3, y=2), P(x=0, y=-1)), (None, None)]
Find path from x=3 y=2 to x=7 y=3
11111111
10001001
10001001
10001000
10001001
11111111

[]
Find path from x=3 y=2 to x=7 y=3
99999999
90445009
90409009
90600600
90075009
99999999

[(P(x=6, y=3), P(x=1, y=0)), (P(x=5, y=3), P(x=1, y=0)), (P(x=5, y=4), P(x=0, y=-1)), (P(x=4, y=4), P(x=1, y=0)), (P(x=4, y=3), P(x=0, y=1)), (P(x=3, y=3), P(x=1, y=0)), (P(x=3, y=2), P(x=0, y=1)), (None, None)]
Find path from x=2 y=2 to x=7 y=4
00000000
01456410
01056410
01456410
01456410
01456410
00000000

[(P(x=7, y=5), P(x=0, y=-1)), (P(x=7, y=6), P(x=0, y=-1)), (P(x=6, y=6), P(x=1, y=0)), (P(x=5, y=6), P(x=1, y=0)), (P(x=5, y=5), P(x=0, y=1)), (P(x=4, y=5), P(x=1, y=0)), (P(x=4, y=4), P(x=0, y=1)), (P(x=3, y=4), P(x=1, y=0)), (P(x=3, y=3), P(x=0, y=1)), (P(x=2, y=3), P(x=1, y=0)), (P(x=2, y=2), P(x=0, y=1)), (None, None)]
#+end_example
