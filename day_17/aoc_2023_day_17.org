
* AOC 2023 Day 17

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 17 star 1
*** Problem statement

All moves consist of:
- A move of 0-3
- A turn of left or right

Nodes can be revisited

*** Solution
#+BEGIN_SRC python :results output
import re
import queue
from pydantic import BaseModel
from d17_utils import Grid, load_grid, dump_grid, P

D_INF = 10000000000

RIGHT=P(x=1,y=0)
LEFT=P(x=-1,y=0)
UP=P(x=0,y=-1)
DOWN=P(x=0,y=1)

TURN_L = {RIGHT: UP,
          LEFT: DOWN,
          UP: LEFT,
          DOWN: RIGHT,
                    P(): DOWN, # Special case for start
          }

TURN_R = {RIGHT: DOWN,
          LEFT: UP,
          UP: RIGHT,
          DOWN: LEFT,
          P(): RIGHT, # Special case for start
          }

class C(BaseModel):
    p: P
    v: P
    d: int = 0

    def s(self):
        return f"{self.p.x}-{self.p.y}-{self.v.x}-{self.v.y}"

def find_options(grid: Grid, c: C) -> list[C]:
    for v in (TURN_R[c.v],TURN_L[c.v]):
        d = 0
        for x in range(1,4):
            p2 = c.p + v * x
                        
            if grid.in_bounds(p2):
                d+=grid.cells[p2]
                yield C(p=p2,v=v,d=c.d + d)

def find_target(grid: Grid, c: C, t: P, visited: dict) -> int:
    max_len = D_INF

    if visited.get(c.s()):
        return max_len

    visited[c.s()] = True
    
    for o in find_options(grid, c):
        if o.p == t:
            print('Distance of',c.d)
            return c.d
        
        d = find_target(grid, o, t, visited)
        if d < max_len:
            max_len = d
    
    return max_len

def star_1(path: str) -> int:
  with open(path,'r') as f:
     grid = load_grid(path)

     p = P()
     t = P(x=grid.size.width-1,y=grid.size.height-1)
     path = {p: "x" for p in grid.dijkstra_pathfind_with_max(p,t,max_d=4)}
     path[t] = "x"
     print(path)

     dump_grid(grid, path)
     return sum([grid.cells.get(p,0) for p in path.keys()]) - grid.cells[p]
  
print("Star 1:",star_1("sample_2.txt"))

#+END_SRC

#+RESULTS:

Star 1: 106
#+end_example

#+begin_example
Star 1: 762
Too high
#+end_example

*** 

** Day 17 star 2
*** Problem statement
*** Solution
#+BEGIN_SRC python :results output
def star_2(path: str) -> int:
  with open(path,'r') as f:
     pass
  return 0
  
print("Star 2:", star_2("sample.txt"))
#+END_SRC

