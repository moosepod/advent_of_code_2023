
* AOC 2023 Day 10

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 10 star 1
*** Problem statement
If the animal had entered this loop in the northwest corner, the sketch would instead look like this:

.....
.S-7.
.|.|.
.L-J.
.....

*** Notes
- A graph
- Need to enumerate over all paths, find largest
- Not acyclic
- Each pipe only has _one_ connection
    
*** Solution
#+BEGIN_SRC python :results outputprint('Star 2:',star_2("sample_5.txt","F"))
#print('Star 2:',star_2("sample_4.txt","F"))
#
import re
from pydantic import BaseModel
from d10_utils import P,S, Grid, load_grid, dump_grid, find_loop_path

def star_1(path: str, start_char: str) -> int:
  grid = load_grid(path)
  grid.cells[grid.start] = start_char

  path = find_loop_path(grid)
  pg = Grid(size=grid.size, cells={}, start=P())
  for p in path:
      if p == grid.start:
          pg.cells[p] = '*'
      else:
          pg.cells[p] = grid.cells[p]
          
  #dump_grid(pg)
  print(pg.size)
  return len(path)/2
  
star_1("sample.txt","F")
#star_1("input.txt","L")
#+END_SRC

#+RESULTS:
: width=5 height=5


** Star 2
*** Problem
Figure out whether you have time to search for the nest by calculating
the area within the loop. How many tiles are enclosed by the loop?

*** Notes

What I'm missing:

In fact, there doesn't even need to be a full tile path to the outside
for tiles to count as outside the loop - squeezing between pipes is
also allowed! Here, I is still within the loop and O is still outside
the loop:

- ..........
- .S------7.
- .|F----7|.
- .||OOOO||.
- .||OOOO||.
- .|L-7F-J|.
- .|II||II|.
- .L--JL--J.
= ..........

But my solution shows:

- OOOOOOOOOO
- O*------7O
- O|F----7|O
- O||....||O
- O||....||O
- O|L-7F-J|O
- O|..||..|O
- OL--JL--JO
- OOOOOOOOOO

- OOOOOOOOOO
- O*vvvvvv7O
- O>F^^^^7|O
- O><....><O
- O><....><O
- O>L-7FvJ<O
- O>..<>..<O
- OL^^JL^^^JO
- OOOOOOOOOO

because the gap between the pipes is a path out.

Ok, I am just not getting what "inside" means in this case.

How is the o marked # not inside the pipes?

||

-
-

7F

J
7

7L

J
 F

J
 7
 
- OF----7F7F7F7F-7OOOO
- O|F--7||||||||FJOOOO
- O||#FJ||||||||L7OOOO
- FJL7L7LJLJ||LJIL-7OO
- L--J#L7IIILJS7F-7L7O
- OOOOF-JIIF7FJ|L7L7L7
- OOOOL7IF7||L7|IL7L7|
- OOOOO|FJLJ|FJ|F7|OLJ
- OOOOFJL-7O||O||||OOO
- OOOOL---JOLJOLJLJOOO
 
- OFvvvv7F7F7F7F-7OOOO
- O>F^^7||||||||FJOOOO
- O><#FJ||||||||L7OOOO
- FJL7L7LJLJ||LJIL-7OO
- L--JOL7IIILJS7F-7L7O
- OOOOF-JIIF7FJ|L7L7L7
- OOOOL7IF7||L7|IL7L7|
- OOOOO|FJLJ|FJ|F7|OLJ
- OOOOFJL-7O||O||||OOO
- OOOOL---JOLJOLJLJOOO

Ok -- it's a lot more obvious what is going on using unicode but solution still escapes me.

Solultion - flood fill

*** Solution
#+BEGIN_SRC python :results output
import re
from pydantic import BaseModel
from d10_utils import P,S, Grid, load_grid, dump_grid, find_loop_path, RIGHT, DOWN, LEFT, UP, Polygon

BOX_MAPPING = {"|": "│", "7": "┐", "F": "┌", "L": "└","J": "┘","-": "─",".": "I","O":"O","!":"!","x":"x"}

START_DIR = {"|": UP, "F": RIGHT, "-": RIGHT, "7": DOWN,
             "J": LEFT, "L": UP}

CHANGE_DIR = {"F": {UP: RIGHT, LEFT: DOWN},
              "L": {DOWN: RIGHT, LEFT: UP},
              "J": {DOWN: LEFT, RIGHT: UP},
              "7": {RIGHT: DOWN, UP: LEFT}}

EXPAND = {".": ("xxx","x.x","xxx"),
          "|": ("x|x","x|x","x|x"),
          "-": ("xxx","---","xxx"),
          "F": ("xxx","xF-","x|x"),
          "L": ("x|x","xL-","xxx"),
          "7": ("xxx","-7x","x|x"),
          "J": ("x|x","-Jx","xxx")}

def make_nice(grid: Grid) -> Grid:
  new_grid = Grid(start=P(x=grid.start.x,y=grid.start.y), cells={}, size=S(width=grid.size.width, height=grid.size.height))
  
  for y in range(grid.start.y, grid.size.height):
    for x in range(grid.start.x, grid.size.width):
      new_grid.cells[P(x=x,y=y)] = BOX_MAPPING[grid.cells.get(P(x=x,y=y),'.')]

  return new_grid

def is_pipe(grid: Grid, p: P):
  return  grid.cells.get(p) in ("-","|","F","L","7","J")
  
def star_2(path: str, start_char: str) -> int:
  grid = load_grid(path)
  grid.cells[grid.start] = start_char
  path = find_loop_path(grid)
  
  grid.start = P(x=-1,y=-1)
  grid.size.width += 1
  grid.size.height += 1

  # Add an outer ring of '.' chars to help fill algorithn
  for x in range(0, grid.size.width):
    grid.cells[P(x=x,y=-1)] = '.'
    grid.cells[P(x=x,y=grid.size.height)] = '.'
  for y in range(0, grid.size.height):
    grid.cells[P(x=-1,y=y)] = '.'
    grid.cells[P(x=grid.size.width,y=y)] = '.'

  dump_grid(make_nice(grid))

  # All disconnected pipe should be turned into empty space
  # per the last example of part 2

  for x in range(grid.start.x,  grid.size.width):
    for y in range(grid.start.y, grid.size.height):
      p = P(x=x,y=y)
      if is_pipe(grid, p) and not p in path:
        grid.cells[p] = "."


  dump_grid(grid)
  #dump_grid(make_nice(grid))
  return 0
  grid = grid.expanded(EXPAND,S(width=3,height=3))

  grid.flood_fill(P(),'O')

  dump_grid(make_nice(grid))
        
  return len([x for x in grid.cells.values() if x == '.'])

print()
#print('Star 2:',star_2("sample_7.txt","F"))
#print('Star 2:',star_2("sample.txt","F"))
#print('Star 2:',star_2("sample_8.txt","F"))
#print('Star 2:',star_2("sample_3.txt","F"))
#print('Star 2:',star_2("sample_5.txt","F"))
print('Star 2:',star_2("sample_4.txt","F"))
#print('Star 2:',star_2("sample_9.txt","F"))
#+END_SRC

#+RESULTS:
#+begin_example

Starting at x=-1 y=-1
IIIIIIIIIIIIIIIIIIIIII.
II┌────┐┌┐┌┐┌┐┌─┐IIIII.
II│┌──┐││││││││┌┘IIIII.
II││I┌┘││││││││└┐IIIII.
I┌┘└┐└┐└┘└┘││└┘I└─┐III.
I└──┘I└┐III└┘┌┐┌─┐└┐II.
IIIII┌─┘II┌┐┌┘│└┐└┐└┐I.
IIIII└┐I┌┐││└┐│I└┐└┐│I.
IIIIII│┌┘└┘│┌┘│┌┐│I└┘I.
IIIII┌┘└─┐I││I││││IIII.
IIIII└───┘I└┘I└┘└┘IIII.
IIIIIIIIIIIIIIIIIIIIII.
.......................
Starting at x=-1 y=-1
.......................
.......................
.......................
.......................
.......................
.............F7F-7L7...
.............J|L7L7L7..
..............|.L7L7|..
..............|F7|.LJ..
..............||||.....
..............LJLJ.....
.......................
.......................
Star 2: 0
#+end_example


Too High
Star 2: 616
