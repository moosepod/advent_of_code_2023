
* AOC 2023 Day 10

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 10 star 1
*** Problem statement
If the animal had entered this loop in the northwest corner, the sketch would instead look like this:

.....
.S-7.
.|.|.
.L-J.
.....

*** Notes
- A graph
- Need to enumerate over all paths, find largest
- Not acyclic
- Each pipe only has _one_ connection
    
*** Solution
#+BEGIN_SRC python :results output
import re
from pydantic import BaseModel
from d10_utils import P,S, Grid, load_grid, dump_grid, find_loop_path

def star_1(path: str, start_char: str) -> int:
  grid = load_grid(path)
  grid.cells[grid.start] = start_char

  path = find_loop_path(grid)
  pg = Grid(size=grid.size, cells={}, start=P())
  for p in path:
      if p == grid.start:
          pg.cells[p] = '*'
      else:
          pg.cells[p] = grid.cells[p]
          
  #dump_grid(pg)
  print(pg.size)
  return len(path)/2
  
star_1("sample.txt","F")
#star_1("input.txt","L")
#+END_SRC

#+RESULTS:
: Starting at x=0 y=0 z=0
: .....
: .*-7.
: .|.|.
: .L-J.
: .....


** Star 2
*** Problem
Figure out whether you have time to search for the nest by calculating
the area within the loop. How many tiles are enclosed by the loop?

*** Notes

Can solve with pathfinding, though unclear if efficient enoguh

*** Solution
#+BEGIN_SRC python :results output
import re
from pydantic import BaseModel
from d10_utils import P,S, Grid, load_grid, dump_grid, find_loop_path

def outside(p: P, grid: Grid) -> bool:
    if grid.cells.get(p,'.') != '.':
        return False
    
    for dir in (P(x=1,y=0),P(x=-1,y=0),P(x=0,y=-1),P(x=0,y=1)):
        p2 = p + dir
        if not grid.in_bounds(p2):
            return True
        
        if grid.cells.get(p2,'.') == 'O' :
            return True
            
    return False

def star_2(path: str, start_char: str) -> int:
  grid = load_grid(path)
  grid.cells[grid.start] = start_char

  path = find_loop_path(grid)
  pg = Grid(size=grid.size, cells={}, start=P())

  for p in path:
      if p == grid.start:
          pg.cells[p] = '*'
      else:
          pg.cells[p] = grid.cells[p]

          
  dump_grid(pg)

  counter = 0
  old_enclosed = -1
  enclosed = 0

  while old_enclosed != enclosed and counter < 10000:
      counter += 1
      old_enclosed = enclosed
      ul,lr = P(x=0,y=0), P(x=pg.size.width,y=pg.size.width)

      while ul.x < lr.x:
          for x in range(ul.x, lr.x):
              p = P(x=x, y=ul.y)
              if outside(p,pg):
                  pg.cells[p] = 'O'
              
              p = P(x=x, y=lr.y-1)
              if outside(p,pg):
                  pg.cells[p] = 'O'
                  
          for y in range(ul.y, lr.y):
              p = P(x=ul.x, y=y)
              if outside(p,pg):
                  pg.cells[p] = 'O'

              p = P(x=lr.x-1, y=y)
              if outside(p,pg):
                  pg.cells[p] = 'O'

          ul += P(x=1,y=1)
          lr += P(x=-1,y=-1)

      enclosed = 0
      for y in range(0,pg.size.height):
         for x in range(0,pg.size.width):
             if pg.cells.get(P(x=x,y=y),'.') == '.':
                 enclosed += 1
      
  if counter == 10000:
      print("WARNING: hit max")
      
  #dump_grid(pg)

  return enclosed

print()
print('Star 2:',star_2("sample_3.txt","F"))
#+END_SRC

#+RESULTS:
#+begin_example

Starting at x=0 y=0 z=0
...........
.*-------7.
.|F-----7|.
.||.....||.
.||.....||.
.|L-7.F-J|.
.|..|.|..|.
.L--J.L--J.
...........
Star 2: 4
#+end_example
