
* AOC 2023 Day 10

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 10 star 1
*** Problem statement
If the animal had entered this loop in the northwest corner, the sketch would instead look like this:

.....
.S-7.
.|.|.
.L-J.
.....

*** Notes
- A graph
- Need to enumerate over all paths, find largest
- Not acyclic
- Each pipe only has _one_ connection
    
*** Solution
#+BEGIN_SRC python :results output
import re
from pydantic import BaseModel
from d10_utils import P,S, Grid, load_grid, dump_grid, find_loop_path

def star_1(path: str, start_char: str) -> int:
  grid = load_grid(path)
  grid.cells[grid.start] = start_char

  path = find_loop_path(grid)
  pg = Grid(size=grid.size, cells={}, start=P())
  for p in path:
      if p == grid.start:
          pg.cells[p] = '*'
      else:
          pg.cells[p] = grid.cells[p]
          
  #dump_grid(pg)
  print(pg.size)
  return len(path)/2
  
star_1("sample.txt","F")
#star_1("input.txt","L")
#+END_SRC

#+RESULTS:
: Starting at x=0 y=0 z=0
: .....
: .*-7.
: .|.|.
: .L-J.
: .....


** Star 2
*** Problem
Figure out whether you have time to search for the nest by calculating
the area within the loop. How many tiles are enclosed by the loop?

*** Notes

What I'm missing:

In fact, there doesn't even need to be a full tile path to the outside
for tiles to count as outside the loop - squeezing between pipes is
also allowed! Here, I is still within the loop and O is still outside
the loop:

- ..........
- .S------7.
- .|F----7|.
- .||OOOO||.
- .||OOOO||.
- .|L-7F-J|.
- .|II||II|.
- .L--JL--J.
= ..........

But my solution shows:

- OOOOOOOOOO
- O*------7O
- O|F----7|O
- O||....||O
- O||....||O
- O|L-7F-J|O
- O|..||..|O
- OL--JL--JO
- OOOOOOOOOO


because the gap between the pipes is a path out.

- Have O "follow the pipe" somehow -, JL 7F (and upper/lower examples)
- Replace things with gaps with new (eg H in this case). Needs to handle corner cases.
= Doesn't work due to inner loop (start from outside in? follow loop?)
- Alright, this doesn't work either
  
*** Solution
#+BEGIN_SRC python :results output
import re
from pydantic import BaseModel
from d10_utils import P,S, Grid, load_grid, dump_grid, find_loop_path

def outside(p: P, grid: Grid) -> bool:
    if grid.cells.get(p,'.') != '.':
        return False
    
    for dir in (P(x=1,y=0),P(x=-1,y=0),P(x=0,y=-1),P(x=0,y=1)):
        p2 = p + dir
        if not grid.in_bounds(p2):
            return True
        
        if grid.cells.get(p2,'.') == 'O' :
            return True
            
    return False

def star_2(path: str, start_char: str) -> int:
  grid = load_grid(path)
  grid.cells[grid.start] = start_char

  path = find_loop_path(grid)
  print(len(path)/2)
  pg = Grid(size=grid.size, cells={}, start=P())

  for y in range(0,grid.size.height):
      for x in range(0,grid.size.width):
          pg.cells[P(x=x,y=y)] = '.'
          
  for p in path:
      if p == grid.start:
          pg.cells[p] = '*'
      else:
          pg.cells[p] = grid.cells[p]

  # Anything adjascent to a pipe entrance should count as an O
  # ASSUMPTION -- no pipes touch map edge
  for y in range(0,grid.size.height):
      for x in range(0,grid.size.width):
          p = P(x=x,y=y)
          if pg.cells[p] == '.':
              for p1, p2, c1, c2 in ((P(x=x,y=y+1), P(x=x+1,y=y+1), '7','F'),
                                     (P(x=x-1, y=y),P(x=x-1,y=y-1),'7','J'),
                                     (P(x=x, y=y-1),P(x=x+1,y=y-1),'J','L'),
                                     (P(x=x+1, y=y),P(x=x+1,y=y+1),'L','7')
                                     ):
                  if pg.in_bounds(p1) and pg.in_bounds(p2) and pg.cells.get(p1) == c1 and pg.cells.get(p2) == c2:
                      pg.cells[p] = 'M'
                      break
          
  dump_grid(pg)

  old_enclosed = -1
  enclosed = 0

  while old_enclosed != enclosed:
      old_enclosed = enclosed
      ul,lr = P(x=0,y=0), P(x=pg.size.width,y=pg.size.width)

      while ul.x < lr.x:
          for x in range(ul.x, lr.x):
              p = P(x=x, y=ul.y)
              if outside(p,pg):
                  pg.cells[p] = 'O'
              
              p = P(x=x, y=lr.y-1)
              if outside(p,pg):
                  pg.cells[p] = 'O'
                  
          for y in range(ul.y, lr.y):
              p = P(x=ul.x, y=y)
              if outside(p,pg):
                  pg.cells[p] = 'O'

              p = P(x=lr.x-1, y=y)
              if outside(p,pg):
                  pg.cells[p] = 'O'

          ul += P(x=1,y=1)
          lr += P(x=-1,y=-1)

      enclosed = 0
      for y in range(0,pg.size.height):
          for x in range(0,pg.size.width):
             if pg.cells.get(P(x=x,y=y) or '.') == '.':
                 enclosed += 1

  dump_grid(pg)


  return enclosed

print()
print('Star 2:',star_2("sample_4.txt","F"))
#+END_SRC

#+RESULTS:
#+begin_example

70.5
Starting at x=0 y=0 z=0
.F----7F7F7F7F-7....
.|F--7||||||||FJ....
.||.FJ||||||||L7M...
FJL7L7LJLJ||LJ.L-7..
L--J.L7M.MLJ*7F-7L7.
....F-J..F7FJ|L7L7L7
....L7.F7||L7|ML7L7|
.....|FJLJ|FJ|F7|.LJ
....FJL-7.||.||||...
....L---J.LJ.LJLJ...
Starting at x=0 y=0 z=0
OF----7F7F7F7F-7OOOO
O|F--7||||||||FJOOOO
O||.FJ||||||||L7MOOO
FJL7L7LJLJ||LJ.L-7OO
L--J.L7M.MLJ*7F-7L7O
OOOOF-J..F7FJ|L7L7L7
OOOOL7.F7||L7|ML7L7|
OOOOO|FJLJ|FJ|F7|OLJ
OOOOFJL-7O||O||||OOO
OOOOL---JOLJOLJLJOOO
Star 2: 7
#+end_example


Too High
Star 2: 616
