
* AOC 2023 Day 10

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Day 10 star 1
*** Problem statement
If the animal had entered this loop in the northwest corner, the sketch would instead look like this:

.....
.S-7.
.|.|.
.L-J.
.....

*** Notes
- A graph
- Need to enumerate over all paths, find largest
- Not acyclic
- Each pipe only has _one_ connection
    
*** Solution
#+BEGIN_SRC python :results output
import re
from pydantic import BaseModel
from d10_utils import P,S, Grid, load_grid, dump_grid, find_loop_path

def star_1(path: str, start_char: str) -> int:
  grid = load_grid(path)
  grid.cells[grid.start] = start_char

  path = find_loop_path(grid)
  pg = Grid(size=grid.size, cells={}, start=P())
  for p in path:
      if p == grid.start:
          pg.cells[p] = '*'
      else:
          pg.cells[p] = grid.cells[p]
          
  #dump_grid(pg)
  print(pg.size)
  return len(path)/2
  
star_1("sample.txt","F")
#star_1("input.txt","L")
#+END_SRC

#+RESULTS:
: Starting at x=0 y=0 z=0
: .....
: .*-7.
: .|.|.
: .L-J.
: .....


** Star 2
*** Problem
Figure out whether you have time to search for the nest by calculating
the area within the loop. How many tiles are enclosed by the loop?

*** Notes

What I'm missing:

In fact, there doesn't even need to be a full tile path to the outside
for tiles to count as outside the loop - squeezing between pipes is
also allowed! Here, I is still within the loop and O is still outside
the loop:

- ..........
- .S------7.
- .|F----7|.
- .||OOOO||.
- .||OOOO||.
- .|L-7F-J|.
- .|II||II|.
- .L--JL--J.
= ..........

But my solution shows:

- OOOOOOOOOO
- O*------7O
- O|F----7|O
- O||....||O
- O||....||O
- O|L-7F-J|O
- O|..||..|O
- OL--JL--JO
- OOOOOOOOOO

- OOOOOOOOOO
- O*vvvvvv7O
- O>F^^^^7|O
- O><....><O
- O><....><O
- O>L-7FvJ<O
- O>..<>..<O
- OL^^JL^^^JO
- OOOOOOOOOO

because the gap between the pipes is a path out.

Ok, I am just not getting what "inside" means in this case.

How is the o marked # not inside the pipes?

||

-
-

7F

J
7

7L

J
 F

J
 7
 
- OF----7F7F7F7F-7OOOO
- O|F--7||||||||FJOOOO
- O||#FJ||||||||L7OOOO
- FJL7L7LJLJ||LJIL-7OO
- L--J#L7IIILJS7F-7L7O
- OOOOF-JIIF7FJ|L7L7L7
- OOOOL7IF7||L7|IL7L7|
- OOOOO|FJLJ|FJ|F7|OLJ
- OOOOFJL-7O||O||||OOO
- OOOOL---JOLJOLJLJOOO
 
- OFvvvv7F7F7F7F-7OOOO
- O>F^^7||||||||FJOOOO
- O><#FJ||||||||L7OOOO
- FJL7L7LJLJ||LJIL-7OO
- L--JOL7IIILJS7F-7L7O
- OOOOF-JIIF7FJ|L7L7L7
- OOOOL7IF7||L7|IL7L7|
- OOOOO|FJLJ|FJ|F7|OLJ
- OOOOFJL-7O||O||||OOO
- OOOOL---JOLJOLJLJOOO

Ok -- it's a lot more obvious what is going on using unicode but solution still escapes me.

Solultion - flood fill

*** Solution
#+BEGIN_SRC python :results output
import re
from pydantic import BaseModel
from d10_utils import P,S, Grid, load_grid, dump_grid, find_loop_path

BOX_MAPPING = {"|": "│", "7": "┐", "F": "┌", "L": "└","J": "┘","-": "─"}

def star_2(path: str, start_char: str) -> int:
  grid = load_grid(path)
  grid.cells[grid.start] = start_char

  path = find_loop_path(grid)
  print(len(path)/2)
  pg = Grid(size=grid.size, cells={}, start=P())

  # Surround grid by blank space to help with fill
  for y in range(-1,grid.size.height+1):
      for x in range(-1,grid.size.width+1):
          pg.cells[P(x=x,y=y)] = '.'
          
  for p in path:
      if p == grid.start:
          pg.cells[p] = '*'
      else:
          pg.cells[p] =  BOX_MAPPING.get(grid.cells[p], grid.cells[p])


  pg.flood_fill('O',[P()])
  dump_grid(pg)
  
  return len([x for x in pg.cells.values() if x == '.'])

print()
print('Star 2:',star_2("sample_5.txt","F"))
#+END_SRC

#+RESULTS:
#+begin_example

22.5
Starting at x=0 y=0 z=0
OOOOOOOOOO
O*──────┐O
O│┌────┐│O
O││....││O
O││....││O
O│└─┐┌─┘│O
O│..││..│O
O└──┘└──┘O
OOOOOOOOOO
Star 2: 12
#+end_example


Too High
Star 2: 616
