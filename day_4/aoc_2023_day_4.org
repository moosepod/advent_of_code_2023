
* AOC 2023 Day 4

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Puzzle
The Elf leads you over to the pile of colorful cardss. There, you
discover dozens of scratchcardss, all with their opaque covering
already scratched off. Picking one up, it looks like each cards has two
lists of numbers separated by a vertical bar (|): a list of winning
numbers and then a list of numbers you have. You organize the
information into a table (your puzzle input).

As far as the Elf has been able to figure out, you have to figure out
which of the numbers you have appear in the list of winning
numbers. The first match makes the cards worth one point and each match
after the first doubles the point value of that cards.

For example:

| Card 1: | 41 | 48 | 83 | 86 | 17 | - | 83 | 86 | 06 | 31 | 17 | 09 | 48 | 53 |
| Card 2: | 13 | 32 | 20 | 16 | 61 | - | 61 | 30 | 68 | 82 | 17 | 32 | 24 | 19 |
| Card 3: | 01 | 21 | 53 | 59 | 44 | - | 69 | 82 | 63 | 72 | 16 | 21 | 14 | 01 |
| Card 4: | 41 | 92 | 73 | 84 | 69 | - | 59 | 84 | 76 | 51 | 58 | 05 | 54 | 83 |
| Card 5: | 87 | 83 | 26 | 28 | 32 | - | 88 | 30 | 70 | 12 | 93 | 22 | 82 | 36 |
| Card 6: | 31 | 18 | 13 | 56 | 72 | - | 74 | 77 | 10 | 23 | 35 | 67 | 36 | 11 |

** Load and validate cards
#+BEGIN_SRC python :session session_day_4 :results output
from pydantic import BaseModel
try:
  import re
  class Card(BaseModel):
    id: int
    numbers: list[int]
    winning: list[int]

    def dump(self):
      print(f"Card {self.id}: {self.numbers.join(' ' )} | {self.winning.join(' ')}")

  class Cards(BaseModel):
    cards: list[Card]

  def load_cards(path) -> Cards:
    cards = Cards(cards=[])

    with open(path) as f:
      for line in f.read().split("\n"):
        m = re.search(r"^Card (\d+): ([\d ]+) \| ([\d ]+)$", line.strip())
        print(line)
        if not m:
          raise Exception("Missing data")
        id, numbers, winning = m.group(1),m.group(2),m.group(3)
        cards.cards.append(Card(id=id, numbers=[int(n) for n in numbers.split(' ') if n != ''], winning=[int(n) for n in winning.split(' ') if n != '']))

    return Cards()

  cards = load_cards("sample.txt")
  for card in cards:
    card.dump()
except Exception as e:
  print("Error:",e)
#+END_SRC

#+RESULTS:
: Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53
: Card 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19
: Card 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1
: Card 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83
: Card 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36
: Card 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11
: 
: Error: Missing data

** Day 4 star 1
*** Problem statement

In the above example, cards 1 has five winning numbers (41, 48, 83, 86,
and 17) and eight numbers you have (83, 86, 6, 31, 17, 9, 48, and
53). Of the numbers you have, four of them (48, 83, 17, and 86) are
winning numbers! That means cards 1 is worth 8 points (1 for the first
match, then doubled three times for each of the three matches after
the first).

- Cardss 2 has two winning numbers (32 and 61), so it is worth 2 points.
- Cardss 3 has two winning numbers (1 and 21), so it is worth 2 points.
- Cardss 4 has one winning number (84), so it is worth 1 point.
- Cardss 5 has no winning numbers, so it is worth no points.
- Cardss 6 has no winning numbers, so it is worth no points.

So, in this example, the Elf's pile of scratchcardss is worth 13 points.

Take a seat in the large pile of colorful cardss. How many points are they worth in total?

*** Solution
#+BEGIN_SRC python :session session_day_4 :results output
try:
  def star_1(cards: Cards) -> int:
      return 0
  
  print(star_1(cards))
except Exception as e:
  print("Error:",e)
#+END_SRC

** Day 4 star 2
*** Problem statement
*** Solution
#+BEGIN_SRC python :session session_day_4 :results output
try:
  def star_2(cards: Cardss) -> int:
      return 0
  
  print(star_2(cards))
except Exception as e:
  print("Error:",e)
#+END_SRC

