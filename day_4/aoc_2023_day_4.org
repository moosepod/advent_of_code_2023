
* AOC 2023 Day 4

** Initialize 
#+BEGIN_SRC elisp
  (pyvenv-activate "~/projects/project_venv/")
  ; This is needed to make sure python indentation isn't messed up
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

** Puzzle
The Elf leads you over to the pile of colorful cards. There, you
discover dozens of scratchcards, all with their opaque covering
already scratched off. Picking one up, it looks like each cards has two
lists of numbers separated by a vertical bar (|): a list of winning
numbers and then a list of numbers you have. You organize the
information into a table (your puzzle input).

As far as the Elf has been able to figure out, you have to figure out
which of the numbers you have appear in the list of winning
numbers. The first match makes the cards worth one point and each match
after the first doubles the point value of that cards.

For example:

| Card 1: | 41 | 48 | 83 | 86 | 17 | - | 83 | 86 | 06 | 31 | 17 | 09 | 48 | 53 |
| Card 2: | 13 | 32 | 20 | 16 | 61 | - | 61 | 30 | 68 | 82 | 17 | 32 | 24 | 19 |
| Card 3: | 01 | 21 | 53 | 59 | 44 | - | 69 | 82 | 63 | 72 | 16 | 21 | 14 | 01 |
| Card 4: | 41 | 92 | 73 | 84 | 69 | - | 59 | 84 | 76 | 51 | 58 | 05 | 54 | 83 |
| Card 5: | 87 | 83 | 26 | 28 | 32 | - | 88 | 30 | 70 | 12 | 93 | 22 | 82 | 36 |
| Card 6: | 31 | 18 | 13 | 56 | 72 | - | 74 | 77 | 10 | 23 | 35 | 67 | 36 | 11 |

** Load and validate cards
#+BEGIN_SRC python :session session_day_4 :results output
from pydantic import BaseModel
try:
  import re
  class Card(BaseModel):
    id: int
    numbers: list[int]
    winning: list[int]
    winning_count: int = 0

    def dump(self):
      print(f"Card {self.id}: {' ' .join([str(x) for x in self.winning])} | {' '.join([str(x) for x in self.numbers])}")

  class Cards(BaseModel):
    cards: list[Card]

  def load_cards(path) -> Cards:
    cards = Cards(cards=[])

    with open(path) as f:
      for idx, line in enumerate(f.read().split("\n")):
        if not line:
          continue
        m = re.search(r"^Card +(\d+): ([\d ]+) \| ([\d ]+)$", line.strip())
        if not m:
          raise Exception(f"Missing data on line {idx+1}")
        id, winning, numbers = m.group(1),m.group(2),m.group(3)
        # list(set( to force the lists unique (this changes the ordering...)
        cards.cards.append(Card(id=id, numbers=list(set([int(n) for n in numbers.split(' ') if n != ''])), winning=list(set([int(n) for n in winning.split(' ') if n != '']))))

    return cards

  cards = load_cards("input.txt")
  print(f"Loaded {len(cards.cards)} cards")
except Exception as e:
  print("Error:",e)
#+END_SRC

** Day 4 star 1
*** Problem statement

In the above example, cards 1 has five winning numbers (41, 48, 83, 86,
and 17) and eight numbers you have (83, 86, 6, 31, 17, 9, 48, and
53). Of the numbers you have, four of them (48, 83, 17, and 86) are
winning numbers! That means cards 1 is worth 8 points (1 for the first
match, then doubled three times for each of the three matches after
the first).

- Cards 2 has two winning numbers (32 and 61), so it is worth 2 points.
- Cards 3 has two winning numbers (1 and 21), so it is worth 2 points.
- Cards 4 has one winning number (84), so it is worth 1 point.
- Cards 5 has no winning numbers, so it is worth no points.
- Cards 6 has no winning numbers, so it is worth no points.

So, in this example, the Elf's pile of scratchcards is worth 13 points.

Take a seat in the large pile of colorful cards. How many points are they worth in total?

*** Solution
#+BEGIN_SRC python :session session_day_4 :results output
try:
  def star_1(cards: Cards) -> int:
    total = 0
    for card in cards.cards:
      card.winning_count = len([n for n in card.numbers if n in card.winning])
      if card.winning_count:
        total += 2**(card.winning_count-1)

    return total

  print(star_1(cards))
except Exception as e:
  print("Error:",e)
#+END_SRC


** Day 4 star 2
*** Problem statement

There's no such thing as "points". Instead, scratchcards only cause
you to win more scratchcards equal to the number of winning numbers
you have.

Specifically, you win copies of the scratchcards below the winning
card equal to the number of matches. So, if card 10 were to have 5
matching numbers, you would win one copy each of cards 11, 12, 13, 14,
and 15.

Copies of scratchcards are scored like normal scratchcards and have
the same card number as the card they copied. So, if you win a copy of
card 10 and it has 5 matching numbers, it would then win a copy of the
same cards that the original card 10 won: cards 11, 12, 13, 14,
and 15. This process repeats until none of the copies cause you to win
any more cards. (Cards will never make you copy a card past the end of
the table.)

This time, the above example goes differently:

| Card 1: | 41 | 48 | 83 | 86 | 17 | - | 83 | 86 | 06 | 31 | 17 | 09 | 48 | 53 |
| Card 2: | 13 | 32 | 20 | 16 | 61 | - | 61 | 30 | 68 | 82 | 17 | 32 | 24 | 19 |
| Card 3: | 01 | 21 | 53 | 59 | 44 | - | 69 | 82 | 63 | 72 | 16 | 21 | 14 | 01 |
| Card 4: | 41 | 92 | 73 | 84 | 69 | - | 59 | 84 | 76 | 51 | 58 | 05 | 54 | 83 |
| Card 5: | 87 | 83 | 26 | 28 | 32 | - | 88 | 30 | 70 | 12 | 93 | 22 | 82 | 36 |
| Card 6: | 31 | 18 | 13 | 56 | 72 | - | 74 | 77 | 10 | 23 | 35 | 67 | 36 | 11 |

- Card 1 has four matching numbers, so you win one copy each of the next four cards: cards 2, 3, 4, and 5.
- Your original card 2 has two matching numbers, so you win one copy each of cards 3 and 4.
- Your copy of card 2 also wins one copy each of cards 3 and 4.
- Your four instances of card 3 (one original and three copies) have two matching numbers, so you win four copies each of cards 4 and 5.
- Your eight instances of card 4 (one original and seven copies) have one matching number, so you win eight copies of card 5.
- Your fourteen instances of card 5 (one original and thirteen copies) have no matching numbers and win no more cards.
- Your one instance of card 6 (one original) has no matching numbers and wins no more cards.

Once all of the originals and copies have been processed, you end up
with 1 instance of card 1, 2 instances of card 2, 4 instances of card
3, 8 instances of card 4, 14 instances of card 5, and 1 instance of
card 6. In total, this example pile of scratchcards causes you to
ultimately have 30 scratchcards!

Process all of the original and copied scratchcards until no more
scratchcards are won. Including the original set of scratchcards, how
many total scratchcards do you end up with?

*** Solution

#+BEGIN_SRC python :session session_day_4 :results output
try:
  def enumerate_wins(card: Card, cards: list[Card], won_cards: dict, add: bool):
    if add:
      won_cards[card.id] += 1

    if not card.winning_count:
      return

    for idx in range(card.id, card.id + card.winning_count):
      enumerate_wins(cards[idx], cards, won_cards,True)

  def star_2(d: Cards) -> int:
    # Assumes that star 1 has been run, as this populates the winning count
    cards = d.cards
    won_cards = {card.id: 1 for card in cards}

    for card in cards:
      if card.winning_count:
        enumerate_wins(card, cards, won_cards, False)

    return sum(won_cards.values())
  
  print(star_2(cards))
except Exception as e:
  print("Error:",e)
#+END_SRC

